
RGB_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000308  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000702  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000204  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000230  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bf  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000784  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <output_grb>:
.equ	SREG, 0x3f


.global output_grb
output_grb:
         movw   r26, r24      ;r26:27 = X = p_buf
  80:	dc 01       	movw	r26, r24
         movw   r24, r22      ;r24:25 = count
  82:	cb 01       	movw	r24, r22
         in     r22, SREG     ;save SREG (global int state)
  84:	6f b7       	in	r22, 0x3f	; 63
         cli                  ;no interrupts from here on, we're cycle-counting
  86:	f8 94       	cli
         in     r20, PORTB
  88:	45 b1       	in	r20, 0x05	; 5
         ori    r20, (1<<OUTBIT)         ;our '1' output
  8a:	42 60       	ori	r20, 0x02	; 2
         in     r21, PORTB
  8c:	55 b1       	in	r21, 0x05	; 5
         andi   r21, ~(1<<OUTBIT)        ;our '0' output
  8e:	5d 7f       	andi	r21, 0xFD	; 253
         ldi    r19, 7        ;7 bit counter (8th bit is different)
  90:	37 e0       	ldi	r19, 0x07	; 7
         ld     r18,X+        ;get first data byte
  92:	2d 91       	ld	r18, X+

00000094 <loop1>:
loop1:
         out    PORTB, r20    ; 1   +0 start of a bit pulse
  94:	45 b9       	out	0x05, r20	; 5
         lsl    r18           ; 1   +1 next bit into C, MSB first
  96:	22 0f       	add	r18, r18
         brcs   L1            ; 1/2 +2 branch if 1
  98:	30 f0       	brcs	.+12     	; 0xa6 <L1>
         out    PORTB, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  9a:	55 b9       	out	0x05, r21	; 5
         nop                  ; 1   +4
  9c:	00 00       	nop
         bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  9e:	27 fb       	bst	r18, 7
         subi   r19, 1        ; 1   +6 how many more bits for this byte?
  a0:	31 50       	subi	r19, 0x01	; 1
         breq   bit8          ; 1/2 +7 last bit, do differently
  a2:	31 f0       	breq	.+12     	; 0xb0 <bit8>
         rjmp   loop1         ; 2   +8, 10 total for 0 bit
  a4:	f7 cf       	rjmp	.-18     	; 0x94 <loop1>

000000a6 <L1>:
L1:
         nop                  ; 1   +4
  a6:	00 00       	nop
         bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  a8:	27 fb       	bst	r18, 7
         subi   r19, 1        ; 1   +6 how many more bits for this byte
  aa:	31 50       	subi	r19, 0x01	; 1
         out    PORTB, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
  ac:	55 b9       	out	0x05, r21	; 5
         brne   loop1         ; 2/1 +8 10 total for 1 bit (fall thru if last bit)
  ae:	91 f7       	brne	.-28     	; 0x94 <loop1>

000000b0 <bit8>:
bit8:
         ldi    r19, 7        ; 1   +9 bit count for next byte
  b0:	37 e0       	ldi	r19, 0x07	; 7
         out    PORTB, r20    ; 1   +0 start of a bit pulse
  b2:	45 b9       	out	0x05, r20	; 5
         brts   L2            ; 1/2 +1 branch if last bit is a 1
  b4:	3e f0       	brts	.+14     	; 0xc4 <L2>
         nop                  ; 1   +2
  b6:	00 00       	nop
         out    PORTB, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  b8:	55 b9       	out	0x05, r21	; 5
         ld     r18, X+       ; 2   +4 fetch next byte
  ba:	2d 91       	ld	r18, X+
         sbiw   r24, 1        ; 2   +6 dec byte counter
  bc:	01 97       	sbiw	r24, 0x01	; 1
         brne   loop1         ; 2   +8 loop back or return
  be:	51 f7       	brne	.-44     	; 0x94 <loop1>
         out    SREG, r22     ; restore global int flag
  c0:	6f bf       	out	0x3f, r22	; 63
         ret
  c2:	08 95       	ret

000000c4 <L2>:
L2:
         ld     r18, X+       ; 2   +3 fetch next byte
  c4:	2d 91       	ld	r18, X+
         sbiw   r24, 1        ; 2   +5 dec byte counter
  c6:	01 97       	sbiw	r24, 0x01	; 1
         out     PORTB, r21   ; 1   +7 end hi for '1' bit (7 clocks hi)
  c8:	55 b9       	out	0x05, r21	; 5
         brne   loop1         ; 2   +8 loop back or return
  ca:	21 f7       	brne	.-56     	; 0x94 <loop1>
         out    SREG, r22     ; restore global int flag
  cc:	6f bf       	out	0x3f, r22	; 63
         ret
  ce:	08 95       	ret

000000d0 <main>:
	p_buf[index++] = r;
	p_buf[index] = b;
}
/**/
int main(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	62 97       	sbiw	r28, 0x12	; 18
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 1<<0;
  e4:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= 1<<1;
  e6:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1<<2;
  e8:	22 9a       	sbi	0x04, 2	; 4

	u8 buf[NUM_LEDS];
	int count = 0;
	
	memset(buf, 0, sizeof(buf));
  ea:	fe 01       	movw	r30, r28
  ec:	31 96       	adiw	r30, 0x01	; 1
  ee:	82 e1       	ldi	r24, 0x12	; 18
  f0:	df 01       	movw	r26, r30
  f2:	1d 92       	st	X+, r1
  f4:	8a 95       	dec	r24
  f6:	e9 f7       	brne	.-6      	; 0xf2 <main+0x22>

	u8 state = S_R;
	u8 val = 0;
	u8 first_time = 1;
  f8:	dd 24       	eor	r13, r13
  fa:	d3 94       	inc	r13
	int count = 0;
	
	memset(buf, 0, sizeof(buf));

	u8 state = S_R;
	u8 val = 0;
  fc:	00 e0       	ldi	r16, 0x00	; 0
	u8 buf[NUM_LEDS];
	int count = 0;
	
	memset(buf, 0, sizeof(buf));

	u8 state = S_R;
  fe:	10 e0       	ldi	r17, 0x00	; 0
				set_color(buf, 2, 0, 0, val);
			}
			else
			{
				state = S_Y;
				val = 0;
 100:	f1 2c       	mov	r15, r1
				set_color(buf, 1, 0, MAX-val, val);
				set_color(buf, 2, 0, 0, val);
			}
			else
			{
				state = S_Y;
 102:	0f 2e       	mov	r0, r31
 104:	f3 e0       	ldi	r31, 0x03	; 3
 106:	9f 2e       	mov	r9, r31
 108:	f0 2d       	mov	r31, r0
			break;
			
			case S_B:
			if (++val <= MAX)
			{
				set_color(buf, 1, 0, MAX-val, val);
 10a:	0f 2e       	mov	r0, r31
 10c:	f1 e3       	ldi	r31, 0x31	; 49
 10e:	ef 2e       	mov	r14, r31
 110:	f0 2d       	mov	r31, r0
				set_color(buf, 3, MAX-val, MAX-val, val);
				set_color(buf, 4, val, 0, val);
			}
			else
			{
				state = S_T;
 112:	0f 2e       	mov	r0, r31
 114:	f5 e0       	ldi	r31, 0x05	; 5
 116:	af 2e       	mov	r10, r31
 118:	f0 2d       	mov	r31, r0
				set_color(buf, 2, val, 0, MAX-val);
				set_color(buf, 3, val, val, 0);
			}
			else
			{
				state = S_V;
 11a:	68 94       	set
 11c:	bb 24       	eor	r11, r11
 11e:	b2 f8       	bld	r11, 2
				set_color(buf, 0, val, 0, 0);
			}
			else
			{
				first_time = 0;
				state = S_G;
 120:	88 24       	eor	r8, r8
 122:	83 94       	inc	r8
				set_color(buf, 0, MAX-val, val, 0);
				set_color(buf, 1, 0, val, 0);
			}
			else
			{
				state = S_B;
 124:	68 94       	set
 126:	cc 24       	eor	r12, r12
 128:	c1 f8       	bld	r12, 1
			PORTB &= ~(1<<1);
		} else {
			PORTB |= (1<<1);
		}
		/**/
		output_grb(buf, sizeof(buf));
 12a:	62 e1       	ldi	r22, 0x12	; 18
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	0e 94 40 00 	call	0x80	; 0x80 <output_grb>
		
		
		switch (state)
 136:	12 30       	cpi	r17, 0x02	; 2
 138:	71 f1       	breq	.+92     	; 0x196 <main+0xc6>
 13a:	28 f4       	brcc	.+10     	; 0x146 <main+0x76>
 13c:	11 23       	and	r17, r17
 13e:	59 f0       	breq	.+22     	; 0x156 <main+0x86>
 140:	11 30       	cpi	r17, 0x01	; 1
 142:	d1 f0       	breq	.+52     	; 0x178 <main+0xa8>
 144:	60 c0       	rjmp	.+192    	; 0x206 <main+0x136>
 146:	14 30       	cpi	r17, 0x04	; 4
 148:	09 f4       	brne	.+2      	; 0x14c <main+0x7c>
 14a:	41 c0       	rjmp	.+130    	; 0x1ce <main+0xfe>
 14c:	90 f1       	brcs	.+100    	; 0x1b2 <main+0xe2>
 14e:	15 30       	cpi	r17, 0x05	; 5
 150:	09 f4       	brne	.+2      	; 0x154 <main+0x84>
 152:	4b c0       	rjmp	.+150    	; 0x1ea <main+0x11a>
 154:	58 c0       	rjmp	.+176    	; 0x206 <main+0x136>
		{
			case S_R:
			if (++val <= MAX)
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 0f       	add	r24, r16
 15a:	83 33       	cpi	r24, 0x33	; 51
 15c:	08 f0       	brcs	.+2      	; 0x160 <main+0x90>
 15e:	55 c0       	rjmp	.+170    	; 0x20a <main+0x13a>
			{
				if (!first_time)
 160:	d1 10       	cpse	r13, r1
 162:	05 c0       	rjmp	.+10     	; 0x16e <main+0x9e>
				{
					set_color(buf, 5, val, MAX-val, MAX-val);
 164:	9e 2d       	mov	r25, r14
 166:	90 1b       	sub	r25, r16
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 168:	98 8b       	std	Y+16, r25	; 0x10
	p_buf[index++] = r;
 16a:	89 8b       	std	Y+17, r24	; 0x11
	p_buf[index] = b;
 16c:	9a 8b       	std	Y+18, r25	; 0x12
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 16e:	f9 82       	std	Y+1, r15	; 0x01
	p_buf[index++] = r;
 170:	8a 83       	std	Y+2, r24	; 0x02
	p_buf[index] = b;
 172:	fb 82       	std	Y+3, r15	; 0x03
		
		
		switch (state)
		{
			case S_R:
			if (++val <= MAX)
 174:	08 2f       	mov	r16, r24
 176:	5b c0       	rjmp	.+182    	; 0x22e <main+0x15e>
				val = 0;
			}
			break;
			
			case S_G:
			if (++val <= MAX)
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 0f       	add	r24, r16
 17c:	83 33       	cpi	r24, 0x33	; 51
 17e:	08 f0       	brcs	.+2      	; 0x182 <main+0xb2>
 180:	48 c0       	rjmp	.+144    	; 0x212 <main+0x142>
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 182:	89 83       	std	Y+1, r24	; 0x01
			break;
			
			case S_G:
			if (++val <= MAX)
			{
				set_color(buf, 0, MAX-val, val, 0);
 184:	9e 2d       	mov	r25, r14
 186:	90 1b       	sub	r25, r16

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
	p_buf[index++] = r;
 188:	9a 83       	std	Y+2, r25	; 0x02
	p_buf[index] = b;
 18a:	fb 82       	std	Y+3, r15	; 0x03
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 18c:	8c 83       	std	Y+4, r24	; 0x04
	p_buf[index++] = r;
 18e:	fd 82       	std	Y+5, r15	; 0x05
	p_buf[index] = b;
 190:	fe 82       	std	Y+6, r15	; 0x06
				val = 0;
			}
			break;
			
			case S_G:
			if (++val <= MAX)
 192:	08 2f       	mov	r16, r24
 194:	4c c0       	rjmp	.+152    	; 0x22e <main+0x15e>
				val = 0;
			}
			break;
			
			case S_B:
			if (++val <= MAX)
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 0f       	add	r24, r16
 19a:	83 33       	cpi	r24, 0x33	; 51
 19c:	e8 f5       	brcc	.+122    	; 0x218 <main+0x148>
			{
				set_color(buf, 1, 0, MAX-val, val);
 19e:	9e 2d       	mov	r25, r14
 1a0:	90 1b       	sub	r25, r16
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1a2:	9c 83       	std	Y+4, r25	; 0x04
	p_buf[index++] = r;
 1a4:	fd 82       	std	Y+5, r15	; 0x05
	p_buf[index] = b;
 1a6:	8e 83       	std	Y+6, r24	; 0x06
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1a8:	ff 82       	std	Y+7, r15	; 0x07
	p_buf[index++] = r;
 1aa:	f8 86       	std	Y+8, r15	; 0x08
	p_buf[index] = b;
 1ac:	89 87       	std	Y+9, r24	; 0x09
				val = 0;
			}
			break;
			
			case S_B:
			if (++val <= MAX)
 1ae:	08 2f       	mov	r16, r24
 1b0:	3e c0       	rjmp	.+124    	; 0x22e <main+0x15e>
				val = 0;
			}
			break;
			
			case S_Y:
			if (++val <= MAX)
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 0f       	add	r24, r16
 1b6:	83 33       	cpi	r24, 0x33	; 51
 1b8:	90 f5       	brcc	.+100    	; 0x21e <main+0x14e>
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1ba:	ff 82       	std	Y+7, r15	; 0x07
	p_buf[index++] = r;
 1bc:	88 87       	std	Y+8, r24	; 0x08
			break;
			
			case S_Y:
			if (++val <= MAX)
			{
				set_color(buf, 2, val, 0, MAX-val);
 1be:	9e 2d       	mov	r25, r14
 1c0:	90 1b       	sub	r25, r16
void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
	p_buf[index++] = r;
	p_buf[index] = b;
 1c2:	99 87       	std	Y+9, r25	; 0x09
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1c4:	8a 87       	std	Y+10, r24	; 0x0a
	p_buf[index++] = r;
 1c6:	8b 87       	std	Y+11, r24	; 0x0b
	p_buf[index] = b;
 1c8:	fc 86       	std	Y+12, r15	; 0x0c
				val = 0;
			}
			break;
			
			case S_Y:
			if (++val <= MAX)
 1ca:	08 2f       	mov	r16, r24
 1cc:	30 c0       	rjmp	.+96     	; 0x22e <main+0x15e>
				val = 0;
			}
			break;
			
			case S_V:
			if (++val <= MAX)
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 0f       	add	r24, r16
 1d2:	83 33       	cpi	r24, 0x33	; 51
 1d4:	38 f5       	brcc	.+78     	; 0x224 <main+0x154>
			{
				set_color(buf, 3, MAX-val, MAX-val, val);
 1d6:	9e 2d       	mov	r25, r14
 1d8:	90 1b       	sub	r25, r16
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1da:	9a 87       	std	Y+10, r25	; 0x0a
	p_buf[index++] = r;
 1dc:	9b 87       	std	Y+11, r25	; 0x0b
	p_buf[index] = b;
 1de:	8c 87       	std	Y+12, r24	; 0x0c
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1e0:	fd 86       	std	Y+13, r15	; 0x0d
	p_buf[index++] = r;
 1e2:	8e 87       	std	Y+14, r24	; 0x0e
	p_buf[index] = b;
 1e4:	8f 87       	std	Y+15, r24	; 0x0f
				val = 0;
			}
			break;
			
			case S_V:
			if (++val <= MAX)
 1e6:	08 2f       	mov	r16, r24
 1e8:	22 c0       	rjmp	.+68     	; 0x22e <main+0x15e>
				val = 0;
			}
			break;
			
			case S_T:
			if (++val <= MAX)
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 0f       	add	r24, r16
 1ee:	83 33       	cpi	r24, 0x33	; 51
 1f0:	e0 f4       	brcc	.+56     	; 0x22a <main+0x15a>
			{
				set_color(buf, 4, MAX-val, val, MAX-val);
 1f2:	9e 2d       	mov	r25, r14
 1f4:	90 1b       	sub	r25, r16
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1f6:	8d 87       	std	Y+13, r24	; 0x0d
	p_buf[index++] = r;
 1f8:	9e 87       	std	Y+14, r25	; 0x0e
	p_buf[index] = b;
 1fa:	9f 87       	std	Y+15, r25	; 0x0f
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
	u16 index = 3*led;
	p_buf[index++] = g;
 1fc:	88 8b       	std	Y+16, r24	; 0x10
	p_buf[index++] = r;
 1fe:	f9 8a       	std	Y+17, r15	; 0x11
	p_buf[index] = b;
 200:	8a 8b       	std	Y+18, r24	; 0x12
				val = 0;
			}
			break;
			
			case S_T:
			if (++val <= MAX)
 202:	08 2f       	mov	r16, r24
 204:	14 c0       	rjmp	.+40     	; 0x22e <main+0x15e>
				val = 0;
			}
			break;
			
			default:
			state = S_R;
 206:	1f 2d       	mov	r17, r15
 208:	12 c0       	rjmp	.+36     	; 0x22e <main+0x15e>
				}
				set_color(buf, 0, val, 0, 0);
			}
			else
			{
				first_time = 0;
 20a:	df 2c       	mov	r13, r15
				state = S_G;
				val = 0;
 20c:	0f 2d       	mov	r16, r15
				set_color(buf, 0, val, 0, 0);
			}
			else
			{
				first_time = 0;
				state = S_G;
 20e:	18 2d       	mov	r17, r8
 210:	0e c0       	rjmp	.+28     	; 0x22e <main+0x15e>
				set_color(buf, 1, 0, val, 0);
			}
			else
			{
				state = S_B;
				val = 0;
 212:	0f 2d       	mov	r16, r15
				set_color(buf, 0, MAX-val, val, 0);
				set_color(buf, 1, 0, val, 0);
			}
			else
			{
				state = S_B;
 214:	1c 2d       	mov	r17, r12
 216:	0b c0       	rjmp	.+22     	; 0x22e <main+0x15e>
				set_color(buf, 2, 0, 0, val);
			}
			else
			{
				state = S_Y;
				val = 0;
 218:	0f 2d       	mov	r16, r15
				set_color(buf, 1, 0, MAX-val, val);
				set_color(buf, 2, 0, 0, val);
			}
			else
			{
				state = S_Y;
 21a:	19 2d       	mov	r17, r9
 21c:	08 c0       	rjmp	.+16     	; 0x22e <main+0x15e>
				set_color(buf, 3, val, val, 0);
			}
			else
			{
				state = S_V;
				val = 0;
 21e:	0f 2d       	mov	r16, r15
				set_color(buf, 2, val, 0, MAX-val);
				set_color(buf, 3, val, val, 0);
			}
			else
			{
				state = S_V;
 220:	1b 2d       	mov	r17, r11
 222:	05 c0       	rjmp	.+10     	; 0x22e <main+0x15e>
				set_color(buf, 4, val, 0, val);
			}
			else
			{
				state = S_T;
				val = 0;
 224:	0f 2d       	mov	r16, r15
				set_color(buf, 3, MAX-val, MAX-val, val);
				set_color(buf, 4, val, 0, val);
			}
			else
			{
				state = S_T;
 226:	1a 2d       	mov	r17, r10
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0x15e>
				set_color(buf, 5, 0, val, val);
			}
			else
			{
				state = S_R;
				val = 0;
 22a:	0f 2d       	mov	r16, r15
				set_color(buf, 4, MAX-val, val, MAX-val);
				set_color(buf, 5, 0, val, val);
			}
			else
			{
				state = S_R;
 22c:	1f 2d       	mov	r17, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	8f e9       	ldi	r24, 0x9F	; 159
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x162>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x168>
 238:	00 00       	nop
 23a:	77 cf       	rjmp	.-274    	; 0x12a <main+0x5a>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
