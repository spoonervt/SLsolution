
RomSearch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a6  00800100  00001aec  00001b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ed  008004a6  008004a6  00001f26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001867  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061e  00000000  00000000  000038eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a0  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000045ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a9  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e13  00000000  00000000  00004b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__ctors_end>
       4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
       8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
       c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      10:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      14:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      18:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      1c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      20:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      24:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      28:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      2c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      30:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      34:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      38:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      3c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      40:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      44:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      48:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      4c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      50:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      54:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      58:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      5c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      60:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      64:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      68:	4a 06       	cpc	r4, r26
      6a:	6c 04       	cpc	r6, r12
      6c:	6c 04       	cpc	r6, r12
      6e:	6c 04       	cpc	r6, r12
      70:	6c 04       	cpc	r6, r12
      72:	6c 04       	cpc	r6, r12
      74:	6c 04       	cpc	r6, r12
      76:	6c 04       	cpc	r6, r12
      78:	6c 04       	cpc	r6, r12
      7a:	6c 04       	cpc	r6, r12
      7c:	6c 04       	cpc	r6, r12
      7e:	6c 04       	cpc	r6, r12
      80:	6c 04       	cpc	r6, r12
      82:	6c 04       	cpc	r6, r12
      84:	6c 04       	cpc	r6, r12
      86:	6c 04       	cpc	r6, r12
      88:	6c 04       	cpc	r6, r12
      8a:	6c 04       	cpc	r6, r12
      8c:	6c 04       	cpc	r6, r12
      8e:	1f 05       	cpc	r17, r15
      90:	6c 04       	cpc	r6, r12
      92:	6c 04       	cpc	r6, r12
      94:	6c 04       	cpc	r6, r12
      96:	6c 04       	cpc	r6, r12
      98:	6c 04       	cpc	r6, r12
      9a:	6c 04       	cpc	r6, r12
      9c:	6c 04       	cpc	r6, r12
      9e:	6c 04       	cpc	r6, r12
      a0:	6c 04       	cpc	r6, r12
      a2:	6c 04       	cpc	r6, r12
      a4:	6c 04       	cpc	r6, r12
      a6:	6c 04       	cpc	r6, r12
      a8:	6c 04       	cpc	r6, r12
      aa:	24 05       	cpc	r18, r4
      ac:	43 05       	cpc	r20, r3
      ae:	01 05       	cpc	r16, r1
      b0:	10 05       	cpc	r17, r0
      b2:	6c 04       	cpc	r6, r12
      b4:	6c 04       	cpc	r6, r12
      b6:	6c 04       	cpc	r6, r12
      b8:	6c 04       	cpc	r6, r12
      ba:	6c 04       	cpc	r6, r12
      bc:	6c 04       	cpc	r6, r12
      be:	6c 04       	cpc	r6, r12
      c0:	6c 04       	cpc	r6, r12
      c2:	6c 04       	cpc	r6, r12
      c4:	6c 04       	cpc	r6, r12
      c6:	6c 04       	cpc	r6, r12
      c8:	6c 04       	cpc	r6, r12
      ca:	6c 04       	cpc	r6, r12
      cc:	bf 05       	cpc	r27, r15
      ce:	6c 04       	cpc	r6, r12
      d0:	6c 04       	cpc	r6, r12
      d2:	4f 06       	cpc	r4, r31
      d4:	6c 04       	cpc	r6, r12
      d6:	6c 04       	cpc	r6, r12
      d8:	6c 04       	cpc	r6, r12
      da:	6c 04       	cpc	r6, r12
      dc:	6c 04       	cpc	r6, r12
      de:	6c 04       	cpc	r6, r12
      e0:	6c 04       	cpc	r6, r12
      e2:	6c 04       	cpc	r6, r12
      e4:	6c 04       	cpc	r6, r12
      e6:	6c 04       	cpc	r6, r12
      e8:	6c 04       	cpc	r6, r12
      ea:	6c 04       	cpc	r6, r12
      ec:	6c 04       	cpc	r6, r12
      ee:	6c 04       	cpc	r6, r12
      f0:	6c 04       	cpc	r6, r12
      f2:	6c 04       	cpc	r6, r12
      f4:	6c 04       	cpc	r6, r12
      f6:	6c 04       	cpc	r6, r12
      f8:	6c 04       	cpc	r6, r12
      fa:	6c 04       	cpc	r6, r12
      fc:	6c 04       	cpc	r6, r12
      fe:	6c 04       	cpc	r6, r12
     100:	6c 04       	cpc	r6, r12
     102:	6c 04       	cpc	r6, r12
     104:	6c 04       	cpc	r6, r12
     106:	6c 04       	cpc	r6, r12
     108:	6c 04       	cpc	r6, r12
     10a:	6c 04       	cpc	r6, r12
     10c:	6c 04       	cpc	r6, r12
     10e:	6c 04       	cpc	r6, r12
     110:	ce 05       	cpc	r28, r14
     112:	65 06       	cpc	r6, r21
     114:	7b 06       	cpc	r7, r27
     116:	fd 06       	cpc	r15, r29
     118:	18 07       	cpc	r17, r24
     11a:	48 07       	cpc	r20, r24
     11c:	6c 04       	cpc	r6, r12
     11e:	7f 04       	cpc	r7, r15
     120:	38 08       	sbc	r3, r8
     122:	6e 08       	sbc	r6, r14
     124:	6c 04       	cpc	r6, r12
     126:	6c 04       	cpc	r6, r12
     128:	6c 04       	cpc	r6, r12
     12a:	be 08       	sbc	r11, r14
     12c:	6c 04       	cpc	r6, r12
     12e:	c3 08       	sbc	r12, r3
     130:	6c 04       	cpc	r6, r12
     132:	6c 04       	cpc	r6, r12
     134:	d5 08       	sbc	r13, r5
     136:	f1 08       	sbc	r15, r1
     138:	6c 04       	cpc	r6, r12
     13a:	6c 04       	cpc	r6, r12
     13c:	6c 04       	cpc	r6, r12
     13e:	d0 09       	sbc	r29, r0

00000140 <__trampolines_end>:
     140:	25 75       	andi	r18, 0x55	; 85
     142:	3a 61       	ori	r19, 0x1A	; 26
     144:	62 6f       	ori	r22, 0xF2	; 242
     146:	72 74       	andi	r23, 0x42	; 66
     148:	0a 00       	.word	0x000a	; ????

0000014a <__c.2209>:
     14a:	61 6c 6c 20 61 64 64 72 65 73 73 65 73 20 66 6f     all addresses fo
     15a:	75 6e 64 0a 00                                      und..

0000015f <__c.2205>:
     15f:	74 68 65 72 65 20 61 72 65 20 6e 6f 20 64 65 76     there are no dev
     16f:	69 63 65 73 20 6f 6e 20 74 68 69 73 20 63 68 61     ices on this cha
     17f:	6e 6e 65 6c 2e 0a 00                                nnel...

00000186 <__c.2163>:
     186:	74 3a 20 52 45 41 44 5f 53 43 52 41 54 43 48 50     t: READ_SCRATCHP
     196:	41 44 20 28 30 78 25 30 32 78 29 20 2c 20 52 45     AD (0x%02x) , RE
     1a6:	41 44 20 32 20 62 79 74 65 73 2c 20 70 72 69 6e     AD 2 bytes, prin
     1b6:	74 20 74 65 6d 70 65 72 61 74 75 72 65 0a 00        t temperature..

000001c5 <__c.2161>:
     1c5:	70 3a 20 73 75 62 6d 69 74 20 52 45 41 44 5f 50     p: submit READ_P
     1d5:	4f 57 45 52 5f 53 55 50 50 4c 59 20 28 30 78 25     OWER_SUPPLY (0x%
     1e5:	30 32 78 29 0a 00                                   02x)..

000001eb <__c.2159>:
     1eb:	69 3a 20 69 6e 69 74 69 61 6c 69 7a 65 20 28 72     i: initialize (r
     1fb:	65 73 65 74 29 0a 00                                eset)..

00000202 <__c.2157>:
     202:	68 3a 20 74 68 69 73 20 68 65 6c 70 0a 00           h: this help..

00000210 <__c.2155>:
     210:	66 3a 20 53 45 41 52 43 48 5f 52 49 4d 20 28 69     f: SEARCH_RIM (i
     220:	6e 63 6c 75 64 65 73 20 61 6e 20 69 6e 69 74 29     ncludes an init)
     230:	0a 00                                               ..

00000232 <__c.2153>:
     232:	65 3a 20 74 65 6d 70 65 72 61 74 75 72 65 20 63     e: temperature c
     242:	6f 6e 76 65 72 73 69 6f 6e 20 77 69 74 68 6f 75     onversion withou
     252:	74 20 72 65 61 64 69 6e 67 20 74 68 65 20 73 74     t reading the st
     262:	61 74 75 73 20 28 67 6f 6f 64 20 66 6f 72 20 70     atus (good for p
     272:	61 72 61 73 69 74 65 20 70 6f 77 65 72 29 0a 00     arasite power)..

00000282 <__c.2151>:
     282:	64 3a 20 74 6f 67 67 6c 65 20 64 65 62 75 67 2c     d: toggle debug,
     292:	20 63 75 72 72 65 6e 74 6c 79 20 64 65 62 75 67      currently debug
     2a2:	20 69 73 3a 25 75 0a 00                              is:%u..

000002aa <__c.2149>:
     2aa:	63 3a 20 43 4f 4e 56 45 52 54 5f 54 20 28 30 78     c: CONVERT_T (0x
     2ba:	25 30 32 78 29 20 61 6e 64 20 77 61 69 74 20 31     %02x) and wait 1
     2ca:	6d 73 0a 00                                         ms..

000002ce <__c.2147>:
     2ce:	61 3a 20 52 45 41 44 5f 52 4f 4d 20 28 30 78 25     a: READ_ROM (0x%
     2de:	30 32 78 29 0a 00                                   02x)..

000002e4 <__c.2145>:
     2e4:	62 3a 20 72 65 61 64 20 31 20 62 69 74 20 0a 00     b: read 1 bit ..

000002f4 <__c.2143>:
     2f4:	31 3a 20 77 72 69 74 65 20 31 20 74 6f 20 0a 00     1: write 1 to ..

00000304 <__c.2141>:
     304:	30 3a 20 77 72 69 74 65 20 30 20 74 6f 20 0a 00     0: write 0 to ..

00000314 <__c.2139>:
     314:	2e 3a 20 73 75 62 6d 69 74 74 69 6e 67 20 52 45     .: submitting RE
     324:	41 44 5f 53 43 41 54 43 48 50 41 44 28 20 30 78     AD_SCATCHPAD( 0x
     334:	25 30 32 78 29 0a 00                                %02x)..

0000033b <__c.2137>:
     33b:	3f 3a 20 70 72 69 6e 74 20 74 68 65 20 61 63 74     ?: print the act
     34b:	69 76 65 20 63 68 61 6e 6e 65 6c 0a 00              ive channel..

00000358 <__c.2135>:
     358:	2f 3a 20 73 75 62 6d 69 74 74 69 6e 67 20 74 68     /: submitting th
     368:	65 20 6c 61 73 74 20 72 65 61 64 20 61 64 64 72     e last read addr
     378:	65 73 73 20 77 69 74 68 20 61 20 4d 41 54 43 48     ess with a MATCH
     388:	5f 52 4f 4d 0a 00                                   _ROM..

0000038e <__ctors_end>:
     38e:	11 24       	eor	r1, r1
     390:	1f be       	out	0x3f, r1	; 63
     392:	cf ef       	ldi	r28, 0xFF	; 255
     394:	d8 e0       	ldi	r29, 0x08	; 8
     396:	de bf       	out	0x3e, r29	; 62
     398:	cd bf       	out	0x3d, r28	; 61

0000039a <__do_copy_data>:
     39a:	14 e0       	ldi	r17, 0x04	; 4
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b1 e0       	ldi	r27, 0x01	; 1
     3a0:	ec ee       	ldi	r30, 0xEC	; 236
     3a2:	fa e1       	ldi	r31, 0x1A	; 26
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__do_copy_data+0x10>
     3a6:	05 90       	lpm	r0, Z+
     3a8:	0d 92       	st	X+, r0
     3aa:	a6 3a       	cpi	r26, 0xA6	; 166
     3ac:	b1 07       	cpc	r27, r17
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <__do_copy_data+0xc>

000003b0 <__do_clear_bss>:
     3b0:	26 e0       	ldi	r18, 0x06	; 6
     3b2:	a6 ea       	ldi	r26, 0xA6	; 166
     3b4:	b4 e0       	ldi	r27, 0x04	; 4
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <.do_clear_bss_start>

000003b8 <.do_clear_bss_loop>:
     3b8:	1d 92       	st	X+, r1

000003ba <.do_clear_bss_start>:
     3ba:	a3 39       	cpi	r26, 0x93	; 147
     3bc:	b2 07       	cpc	r27, r18
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <.do_clear_bss_loop>
     3c0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
     3c4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <_exit>

000003c8 <__bad_interrupt>:
     3c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003cc <write_sensor>:
	_delay_us(OW_TREC);
	return (bit);
}

void write_sensor( uint8_t data,  avrPort * owChannel)
{
     3cc:	fb 01       	movw	r30, r22
	// pin D6 is for debugging ..->
	if (data){ // write a 1: configure as input with pullup active
     3ce:	88 23       	and	r24, r24
     3d0:	e1 f0       	breq	.+56     	; 0x40a <write_sensor+0x3e>
		cbi(*owChannel->ddr, owChannel->mask);    // input
     3d2:	a4 81       	ldd	r26, Z+4	; 0x04
     3d4:	b5 81       	ldd	r27, Z+5	; 0x05
     3d6:	3c 91       	ld	r19, X
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	ac 01       	movw	r20, r24
     3de:	06 80       	ldd	r0, Z+6	; 0x06
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <write_sensor+0x1a>
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	0a 94       	dec	r0
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <write_sensor+0x16>
     3ea:	24 2f       	mov	r18, r20
     3ec:	20 95       	com	r18
     3ee:	23 23       	and	r18, r19
     3f0:	2c 93       	st	X, r18
		sbi(*owChannel->port, owChannel->mask); // enable pull-up
     3f2:	a0 81       	ld	r26, Z
     3f4:	b1 81       	ldd	r27, Z+1	; 0x01
     3f6:	2c 91       	ld	r18, X
     3f8:	06 80       	ldd	r0, Z+6	; 0x06
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <write_sensor+0x34>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <write_sensor+0x30>
     404:	82 2b       	or	r24, r18
     406:	8c 93       	st	X, r24
     408:	08 95       	ret
		//  this is used to show the logic without the  wired and
		// cbi(*owChannel->ddr,6);
		// sbi (*owChannel->port, 6);
	}
	else	{ //write 0: configure as output driving low
		sbi(*owChannel->ddr, owChannel->mask); // output
     40a:	a4 81       	ldd	r26, Z+4	; 0x04
     40c:	b5 81       	ldd	r27, Z+5	; 0x05
     40e:	4c 91       	ld	r20, X
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9c 01       	movw	r18, r24
     416:	06 80       	ldd	r0, Z+6	; 0x06
     418:	02 c0       	rjmp	.+4      	; 0x41e <write_sensor+0x52>
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	0a 94       	dec	r0
     420:	e2 f7       	brpl	.-8      	; 0x41a <write_sensor+0x4e>
     422:	24 2b       	or	r18, r20
     424:	2c 93       	st	X, r18
		cbi(*owChannel->port,owChannel->mask); // drive 0
     426:	a0 81       	ld	r26, Z
     428:	b1 81       	ldd	r27, Z+1	; 0x01
     42a:	2c 91       	ld	r18, X
     42c:	06 80       	ldd	r0, Z+6	; 0x06
     42e:	02 c0       	rjmp	.+4      	; 0x434 <write_sensor+0x68>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <write_sensor+0x64>
     438:	80 95       	com	r24
     43a:	82 23       	and	r24, r18
     43c:	8c 93       	st	X, r24
     43e:	08 95       	ret

00000440 <transmit_bit>:
{
	write_sensor(1,owChannel);
	_delay_ms(1);
}

void transmit_bit(uint8_t bit, avrPort * owChannel){
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	eb 01       	movw	r28, r22

	if (bit)
     446:	88 23       	and	r24, r24
     448:	71 f0       	breq	.+28     	; 0x466 <transmit_bit+0x26>
	{
		// write 1
		write_sensor(0,owChannel);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     450:	88 e0       	ldi	r24, 0x08	; 8
     452:	8a 95       	dec	r24
     454:	f1 f7       	brne	.-4      	; 0x452 <transmit_bit+0x12>
		_delay_us(OW_TLOW1);
		write_sensor(1,owChannel);
     456:	be 01       	movw	r22, r28
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     45e:	88 e9       	ldi	r24, 0x98	; 152
     460:	8a 95       	dec	r24
     462:	f1 f7       	brne	.-4      	; 0x460 <transmit_bit+0x20>
     464:	06 c0       	rjmp	.+12     	; 0x472 <transmit_bit+0x32>
		_delay_us(OW_TSLOT-OW_TLOW1);
	}
	else // write 0
	{
		write_sensor(0,owChannel);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     46c:	80 ea       	ldi	r24, 0xA0	; 160
     46e:	8a 95       	dec	r24
     470:	f1 f7       	brne	.-4      	; 0x46e <transmit_bit+0x2e>
		_delay_us(OW_TLOW0);
	}
	write_sensor(1,owChannel);
     472:	be 01       	movw	r22, r28
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     47a:	8a e1       	ldi	r24, 0x1A	; 26
     47c:	8a 95       	dec	r24
     47e:	f1 f7       	brne	.-4      	; 0x47c <transmit_bit+0x3c>
     480:	00 c0       	rjmp	.+0      	; 0x482 <transmit_bit+0x42>
	_delay_us(OW_TREC);
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <transmit_data>:
	}
	return p;
}

void transmit_data(uint8_t data,  avrPort * owChannel)
{
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	d8 2e       	mov	r13, r24
     498:	7b 01       	movw	r14, r22
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t bitmask = 0x01;
	
	for (uint8_t current_bit = 0; current_bit < 8; current_bit++)
	{
		transmit_bit(data & (bitmask << current_bit),owChannel);
     49e:	01 e0       	ldi	r16, 0x01	; 1
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	c8 01       	movw	r24, r16
     4a4:	0c 2e       	mov	r0, r28
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <transmit_data+0x24>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <transmit_data+0x20>
     4b0:	b7 01       	movw	r22, r14
     4b2:	8d 21       	and	r24, r13
     4b4:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
     4b8:	21 96       	adiw	r28, 0x01	; 1

void transmit_data(uint8_t data,  avrPort * owChannel)
{
	uint8_t bitmask = 0x01;
	
	for (uint8_t current_bit = 0; current_bit < 8; current_bit++)
     4ba:	c8 30       	cpi	r28, 0x08	; 8
     4bc:	d1 05       	cpc	r29, r1
     4be:	89 f7       	brne	.-30     	; 0x4a2 <transmit_data+0x1a>
	{
		transmit_bit(data & (bitmask << current_bit),owChannel);
	}
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	08 95       	ret

000004d0 <read_bit>:
		_delay_us(OW_TLOW0);
	}
	write_sensor(1,owChannel);
	_delay_us(OW_TREC);
}
uint8_t read_bit(avrPort * owChannel){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
	uint8_t bit;
	

	write_sensor(0,owChannel); // pull bus down. initiate transfer
     4d6:	bc 01       	movw	r22, r24
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	8a 95       	dec	r24
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <read_bit+0x10>
	_delay_us(OW_TREAD);
	write_sensor(1,owChannel); // release bus,
     4e4:	be 01       	movw	r22, r28
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     4ec:	9a e0       	ldi	r25, 0x0A	; 10
     4ee:	9a 95       	dec	r25
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <read_bit+0x1e>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <read_bit+0x24>
	_delay_us(OW_TSAMPLE_WAIT);			// now read status
	
	// this is the read ...
	bit = *owChannel->pin & (1<< owChannel->mask);
     4f4:	ea 81       	ldd	r30, Y+2	; 0x02
     4f6:	fb 81       	ldd	r31, Y+3	; 0x03
     4f8:	40 81       	ld	r20, Z
     4fa:	21 e0       	ldi	r18, 0x01	; 1
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	c9 01       	movw	r24, r18
     500:	0e 80       	ldd	r0, Y+6	; 0x06
     502:	02 c0       	rjmp	.+4      	; 0x508 <read_bit+0x38>
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	0a 94       	dec	r0
     50a:	e2 f7       	brpl	.-8      	; 0x504 <read_bit+0x34>
     50c:	94 2f       	mov	r25, r20
     50e:	98 23       	and	r25, r24

	if(bit)
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	09 f4       	brne	.+2      	; 0x516 <read_bit+0x46>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	95 e8       	ldi	r25, 0x85	; 133
     518:	9a 95       	dec	r25
     51a:	f1 f7       	brne	.-4      	; 0x518 <read_bit+0x48>
     51c:	00 00       	nop
     51e:	9a e1       	ldi	r25, 0x1A	; 26
     520:	9a 95       	dec	r25
     522:	f1 f7       	brne	.-4      	; 0x520 <read_bit+0x50>
     524:	00 c0       	rjmp	.+0      	; 0x526 <read_bit+0x56>
		bit = 0;
	}
	_delay_us(OW_TSLOT - OW_TREAD - OW_TSAMPLE_WAIT);
	_delay_us(OW_TREC);
	return (bit);
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <read_data>:
	{
		transmit_bit(data & (bitmask << current_bit),owChannel);
	}
}
uint8_t read_data( avrPort * owChannel)
{
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	7c 01       	movw	r14, r24
     53c:	c0 e0       	ldi	r28, 0x00	; 0
     53e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t data = 0x00;
     540:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t mask = 0x01;
	for (uint8_t num_bits = 0; num_bits < 8; num_bits++)
	{
		if(read_bit(owChannel))
		{
			data |= mask<<num_bits;
     542:	cc 24       	eor	r12, r12
     544:	c3 94       	inc	r12
     546:	d1 2c       	mov	r13, r1
{
	uint8_t data = 0x00;
	uint8_t mask = 0x01;
	for (uint8_t num_bits = 0; num_bits < 8; num_bits++)
	{
		if(read_bit(owChannel))
     548:	c7 01       	movw	r24, r14
     54a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_bit>
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562 <read_data+0x36>
		{
			data |= mask<<num_bits;
     552:	c6 01       	movw	r24, r12
     554:	0c 2e       	mov	r0, r28
     556:	02 c0       	rjmp	.+4      	; 0x55c <read_data+0x30>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	0a 94       	dec	r0
     55e:	e2 f7       	brpl	.-8      	; 0x558 <read_data+0x2c>
     560:	18 2b       	or	r17, r24
     562:	21 96       	adiw	r28, 0x01	; 1
}
uint8_t read_data( avrPort * owChannel)
{
	uint8_t data = 0x00;
	uint8_t mask = 0x01;
	for (uint8_t num_bits = 0; num_bits < 8; num_bits++)
     564:	c8 30       	cpi	r28, 0x08	; 8
     566:	d1 05       	cpc	r29, r1
     568:	79 f7       	brne	.-34     	; 0x548 <read_data+0x1c>
		{
			data |= mask<<num_bits;
		}
	}
	return data;
}
     56a:	81 2f       	mov	r24, r17
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	08 95       	ret

0000057c <read_sensor>:
		//  cbi(*owChannel->port,6);
	}
}

int read_sensor(  avrPort * owChannel)
{
     57c:	fc 01       	movw	r30, r24
	cbi(*owChannel->ddr,owChannel->mask);    // input
     57e:	a4 81       	ldd	r26, Z+4	; 0x04
     580:	b5 81       	ldd	r27, Z+5	; 0x05
     582:	3c 91       	ld	r19, X
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	ac 01       	movw	r20, r24
     58a:	06 80       	ldd	r0, Z+6	; 0x06
     58c:	02 c0       	rjmp	.+4      	; 0x592 <read_sensor+0x16>
     58e:	44 0f       	add	r20, r20
     590:	55 1f       	adc	r21, r21
     592:	0a 94       	dec	r0
     594:	e2 f7       	brpl	.-8      	; 0x58e <read_sensor+0x12>
     596:	24 2f       	mov	r18, r20
     598:	20 95       	com	r18
     59a:	23 23       	and	r18, r19
     59c:	2c 93       	st	X, r18
	sbi (*owChannel->port, owChannel->mask); // enable pull-up
     59e:	a0 81       	ld	r26, Z
     5a0:	b1 81       	ldd	r27, Z+1	; 0x01
     5a2:	4c 91       	ld	r20, X
     5a4:	9c 01       	movw	r18, r24
     5a6:	06 80       	ldd	r0, Z+6	; 0x06
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <read_sensor+0x32>
     5aa:	22 0f       	add	r18, r18
     5ac:	33 1f       	adc	r19, r19
     5ae:	0a 94       	dec	r0
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <read_sensor+0x2e>
     5b2:	24 2b       	or	r18, r20
     5b4:	2c 93       	st	X, r18
	return *owChannel->pin & (1 << owChannel->mask);
     5b6:	a2 81       	ldd	r26, Z+2	; 0x02
     5b8:	b3 81       	ldd	r27, Z+3	; 0x03
     5ba:	2c 91       	ld	r18, X
     5bc:	06 80       	ldd	r0, Z+6	; 0x06
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <read_sensor+0x48>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <read_sensor+0x44>
     5c8:	30 e0       	ldi	r19, 0x00	; 0
}
     5ca:	82 23       	and	r24, r18
     5cc:	93 23       	and	r25, r19
     5ce:	08 95       	ret

000005d0 <sensor_init>:
#include <stdlib.h>



uint8_t sensor_init(avrPort * owChannel)
{
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	8c 01       	movw	r16, r24

	int i;
	uint8_t presence_detected = 0;
	write_sensor(0,owChannel);
     5de:	bc 01       	movw	r22, r24
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     5e6:	8f eb       	ldi	r24, 0xBF	; 191
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <sensor_init+0x1a>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <sensor_init+0x20>
     5f0:	00 00       	nop
	_delay_us(RESET_PULSE_US);
	write_sensor(1,owChannel);
     5f2:	b8 01       	movw	r22, r16
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     5fa:	98 e2       	ldi	r25, 0x28	; 40
     5fc:	9a 95       	dec	r25
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <sensor_init+0x2c>
     600:	cc e2       	ldi	r28, 0x2C	; 44
     602:	d1 e0       	ldi	r29, 0x01	; 1

uint8_t sensor_init(avrPort * owChannel)
{

	int i;
	uint8_t presence_detected = 0;
     604:	f1 2c       	mov	r15, r1

	//wait until slave actually pulls low 
	for (i=0; i<300;i++){
		_delay_us(1);
		if (!read_sensor(owChannel)){
			presence_detected = 1;
     606:	ee 24       	eor	r14, r14
     608:	e3 94       	inc	r14
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	8a 95       	dec	r24
     60e:	f1 f7       	brne	.-4      	; 0x60c <sensor_init+0x3c>
     610:	00 c0       	rjmp	.+0      	; 0x612 <sensor_init+0x42>
	_delay_us(SLAVE_WAITS_RISING_EDGE_MIN_US);  

	//wait until slave actually pulls low 
	for (i=0; i<300;i++){
		_delay_us(1);
		if (!read_sensor(owChannel)){
     612:	c8 01       	movw	r24, r16
     614:	0e 94 be 02 	call	0x57c	; 0x57c <read_sensor>
     618:	89 2b       	or	r24, r25
     61a:	09 f4       	brne	.+2      	; 0x61e <sensor_init+0x4e>
			presence_detected = 1;
     61c:	fe 2c       	mov	r15, r14
     61e:	21 97       	sbiw	r28, 0x01	; 1
	// slave waits  SLAVE_WAITS_RISING_EDGE_MIN_US for rising edge 
	// and may start driving low then
	_delay_us(SLAVE_WAITS_RISING_EDGE_MIN_US);  

	//wait until slave actually pulls low 
	for (i=0; i<300;i++){
     620:	a1 f7       	brne	.-24     	; 0x60a <sensor_init+0x3a>
     622:	87 e6       	ldi	r24, 0x67	; 103
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <sensor_init+0x56>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <sensor_init+0x5c>
     62c:	00 00       	nop
	
	_delay_us(RESET_PULSE_US - SLAVE_WAITS_RISING_EDGE_MAX_US - PRESENCE_PULSE_DURATION_MAX_US);
	
	//PORTD &= ~1<<2;
	
	if (presence_detected){return SENSOR_INIT_VALIDATION_SUCCESS;}
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	f1 10       	cpse	r15, r1
     632:	80 e0       	ldi	r24, 0x00	; 0
	else {return SENSOR_INIT_VALIDATION_FAIL_1;}
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	08 95       	ret

00000642 <debug_sensor_init>:
uint8_t * debug_sensor_init(avrPort * owChannel)
{
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8c 01       	movw	r16, r24
	static uint8_t scope[480];
	uint8_t * p;
	p = scope;

	write_sensor(0,owChannel);
     650:	bc 01       	movw	r22, r24
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     658:	8f eb       	ldi	r24, 0xBF	; 191
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <debug_sensor_init+0x1a>
     660:	00 c0       	rjmp	.+0      	; 0x662 <debug_sensor_init+0x20>
     662:	00 00       	nop
	_delay_us(RESET_PULSE_US);
	write_sensor(1,owChannel);
     664:	b8 01       	movw	r22, r16
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_sensor>
     66c:	c6 ea       	ldi	r28, 0xA6	; 166
     66e:	d4 e0       	ldi	r29, 0x04	; 4
     670:	0f 2e       	mov	r0, r31
     672:	f6 e8       	ldi	r31, 0x86	; 134
     674:	ef 2e       	mov	r14, r31
     676:	f6 e0       	ldi	r31, 0x06	; 6
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0

	int i;
	for ( i=0; i<RESET_PULSE_US; i++){
		scope[i] = read_sensor(owChannel);
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 be 02 	call	0x57c	; 0x57c <read_sensor>
     682:	89 93       	st	Y+, r24
	write_sensor(0,owChannel);
	_delay_us(RESET_PULSE_US);
	write_sensor(1,owChannel);

	int i;
	for ( i=0; i<RESET_PULSE_US; i++){
     684:	ce 15       	cp	r28, r14
     686:	df 05       	cpc	r29, r15
     688:	c9 f7       	brne	.-14     	; 0x67c <debug_sensor_init+0x3a>
		scope[i] = read_sensor(owChannel);
	}
	return p;
}
     68a:	86 ea       	ldi	r24, 0xA6	; 166
     68c:	94 e0       	ldi	r25, 0x04	; 4
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	08 95       	ret

0000069c <search_rom>:
		}
	 }		
}

uint8_t search_rom(uint8_t saddr[64], avrPort * owChannel)
{
     69c:	6f 92       	push	r6
     69e:	7f 92       	push	r7
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	8c 01       	movw	r16, r24
     6ba:	6b 01       	movw	r12, r22
	2: at least one device with a 1 and one device with a 0
	3: no device on the channel
	*/ 
	uint8_t i,rc_t,rc_c;
	uint8_t more_to_do = 0;
	transmit_data(SEARCH_ROM,owChannel);
     6bc:	80 ef       	ldi	r24, 0xF0	; 240
     6be:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
     6c2:	78 01       	movw	r14, r16
     6c4:	e8 01       	movw	r28, r16
     6c6:	aa 24       	eor	r10, r10
     6c8:	a3 94       	inc	r10
				printf_P(PSTR("%u:abort\n"),i);
				return(8);
			}
		} else {
			if (saddr[i] & 16){ // last decision point found before and taken the '0' path
				saddr[i] = 1; 
     6ca:	99 24       	eor	r9, r9
     6cc:	93 94       	inc	r9
				//printf_P(PSTR("I found a 2 in position %u, now taking the 1\n"),i);
				//printf_P(PSTR("rc+t=%u, rc_c = %u\n"),rc_t,rc_c);
				transmit_bit(1,owChannel);
				for (rc_t=i+1;rc_t<64;rc_t++){
					saddr[rc_t] = 4;
     6ce:	68 94       	set
     6d0:	bb 24       	eor	r11, r11
     6d2:	b2 f8       	bld	r11, 2
	for (i=0; i<64;i++){
		rc_t = read_bit(owChannel);
		rc_c = read_bit(owChannel);
		if (saddr[i] == 4){ // testing a new portion of the address
			if      (!rc_t && !rc_c){
				saddr[i] = 2; 
     6d4:	68 94       	set
     6d6:	88 24       	eor	r8, r8
     6d8:	81 f8       	bld	r8, 1
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <search_rom+0x44>
     6dc:	21 96       	adiw	r28, 0x01	; 1
     6de:	a3 94       	inc	r10
     6e0:	6c 2e       	mov	r6, r28
     6e2:	6e 18       	sub	r6, r14
	*/ 
	uint8_t i,rc_t,rc_c;
	uint8_t more_to_do = 0;
	transmit_data(SEARCH_ROM,owChannel);
	for (i=0; i<64;i++){
		rc_t = read_bit(owChannel);
     6e4:	c6 01       	movw	r24, r12
     6e6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_bit>
     6ea:	78 2e       	mov	r7, r24
		rc_c = read_bit(owChannel);
     6ec:	c6 01       	movw	r24, r12
     6ee:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_bit>
		if (saddr[i] == 4){ // testing a new portion of the address
     6f2:	fe 01       	movw	r30, r28
     6f4:	98 81       	ld	r25, Y
     6f6:	94 30       	cpi	r25, 0x04	; 4
     6f8:	39 f5       	brne	.+78     	; 0x748 <search_rom+0xac>
			if      (!rc_t && !rc_c){
     6fa:	71 10       	cpse	r7, r1
     6fc:	0d c0       	rjmp	.+26     	; 0x718 <search_rom+0x7c>
     6fe:	81 11       	cpse	r24, r1
     700:	05 c0       	rjmp	.+10     	; 0x70c <search_rom+0x70>
				saddr[i] = 2; 
     702:	80 82       	st	Z, r8
				transmit_bit(0,owChannel);
     704:	b6 01       	movw	r22, r12
     706:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
     70a:	36 c0       	rjmp	.+108    	; 0x778 <search_rom+0xdc>
				//printf_P(PSTR("%u:00->2, submitting 0\n"),i);
			}
			else if (!rc_t &&  rc_c){
				saddr[i] = 0;
     70c:	10 82       	st	Z, r1
				transmit_bit(0,owChannel);
     70e:	b6 01       	movw	r22, r12
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
     716:	30 c0       	rjmp	.+96     	; 0x778 <search_rom+0xdc>
				//printf_P(PSTR("%u:01->0, submitting 0\n"),i);
			}
			else if ( rc_t && !rc_c){
     718:	81 11       	cpse	r24, r1
     71a:	06 c0       	rjmp	.+12     	; 0x728 <search_rom+0x8c>
				saddr[i] = 1;
     71c:	90 82       	st	Z, r9
				transmit_bit(1,owChannel);
     71e:	b6 01       	movw	r22, r12
     720:	89 2d       	mov	r24, r9
     722:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
     726:	28 c0       	rjmp	.+80     	; 0x778 <search_rom+0xdc>
				//printf_P(PSTR("%u:10->1, submitting 1\n"),i);
			}
			else if ( rc_t &&  rc_c){
				saddr[i] = 8;
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	80 83       	st	Z, r24
				printf_P(PSTR("%u:abort\n"),i);
     72c:	1f 92       	push	r1
     72e:	6f 92       	push	r6
     730:	80 e4       	ldi	r24, 0x40	; 64
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	9f 93       	push	r25
     736:	8f 93       	push	r24
     738:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
				return(8);
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	3f c0       	rjmp	.+126    	; 0x7c6 <search_rom+0x12a>
			}
		} else {
			if (saddr[i] & 16){ // last decision point found before and taken the '0' path
     748:	94 ff       	sbrs	r25, 4
     74a:	11 c0       	rjmp	.+34     	; 0x76e <search_rom+0xd2>
				saddr[i] = 1; 
     74c:	90 82       	st	Z, r9
				//printf_P(PSTR("I found a 2 in position %u, now taking the 1\n"),i);
				//printf_P(PSTR("rc+t=%u, rc_c = %u\n"),rc_t,rc_c);
				transmit_bit(1,owChannel);
     74e:	b6 01       	movw	r22, r12
     750:	89 2d       	mov	r24, r9
     752:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
				for (rc_t=i+1;rc_t<64;rc_t++){
     756:	8f e3       	ldi	r24, 0x3F	; 63
     758:	8a 15       	cp	r24, r10
     75a:	90 f0       	brcs	.+36     	; 0x780 <search_rom+0xe4>
     75c:	9a 2d       	mov	r25, r10
					saddr[rc_t] = 4;
     75e:	f8 01       	movw	r30, r16
     760:	e9 0f       	add	r30, r25
     762:	f1 1d       	adc	r31, r1
     764:	b0 82       	st	Z, r11
			if (saddr[i] & 16){ // last decision point found before and taken the '0' path
				saddr[i] = 1; 
				//printf_P(PSTR("I found a 2 in position %u, now taking the 1\n"),i);
				//printf_P(PSTR("rc+t=%u, rc_c = %u\n"),rc_t,rc_c);
				transmit_bit(1,owChannel);
				for (rc_t=i+1;rc_t<64;rc_t++){
     766:	9f 5f       	subi	r25, 0xFF	; 255
     768:	90 34       	cpi	r25, 0x40	; 64
     76a:	c9 f7       	brne	.-14     	; 0x75e <search_rom+0xc2>
     76c:	b7 cf       	rjmp	.-146    	; 0x6dc <search_rom+0x40>
					saddr[rc_t] = 4;
				}
			} else  {
				// transmit a '1', everything else is 0
				transmit_bit(saddr[i] & 1 ,owChannel);
     76e:	b6 01       	movw	r22, r12
     770:	89 2f       	mov	r24, r25
     772:	81 70       	andi	r24, 0x01	; 1
     774:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
	3: no device on the channel
	*/ 
	uint8_t i,rc_t,rc_c;
	uint8_t more_to_do = 0;
	transmit_data(SEARCH_ROM,owChannel);
	for (i=0; i<64;i++){
     778:	ef e3       	ldi	r30, 0x3F	; 63
     77a:	ea 15       	cp	r30, r10
     77c:	08 f0       	brcs	.+2      	; 0x780 <search_rom+0xe4>
     77e:	ae cf       	rjmp	.-164    	; 0x6dc <search_rom+0x40>
     780:	98 01       	movw	r18, r16
     782:	20 5c       	subi	r18, 0xC0	; 192
     784:	3f 4f       	sbci	r19, 0xFF	; 255
			if (saddr[i] & 16){ // last decision point found before and taken the '0' path
				saddr[i] = 1; 
				//printf_P(PSTR("I found a 2 in position %u, now taking the 1\n"),i);
				//printf_P(PSTR("rc+t=%u, rc_c = %u\n"),rc_t,rc_c);
				transmit_bit(1,owChannel);
				for (rc_t=i+1;rc_t<64;rc_t++){
     786:	f8 01       	movw	r30, r16
     788:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	more_to_do = 0;
	for (i=0;i<64;i++){
		more_to_do |= saddr[i] & 0x6; // either 2 or 4
     78a:	91 91       	ld	r25, Z+
     78c:	96 70       	andi	r25, 0x06	; 6
     78e:	89 2b       	or	r24, r25
				transmit_bit(saddr[i] & 1 ,owChannel);
			}
		}
	}
	more_to_do = 0;
	for (i=0;i<64;i++){
     790:	e2 17       	cp	r30, r18
     792:	f3 07       	cpc	r31, r19
     794:	d1 f7       	brne	.-12     	; 0x78a <search_rom+0xee>
     796:	0d c0       	rjmp	.+26     	; 0x7b2 <search_rom+0x116>
     798:	f8 01       	movw	r30, r16
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	8f 01       	movw	r16, r30
		more_to_do |= saddr[i] & 0x6; // either 2 or 4
	}
	for (i=64;i>0;i--){
		if (saddr[i-1] & 2){
     79e:	90 81       	ld	r25, Z
     7a0:	91 ff       	sbrs	r25, 1
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <search_rom+0x10e>
			saddr[i-1] |= 16; // mark last decision in the string
     7a4:	90 61       	ori	r25, 0x10	; 16
     7a6:	90 83       	st	Z, r25
			break;
     7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <search_rom+0x12a>
	}
	more_to_do = 0;
	for (i=0;i<64;i++){
		more_to_do |= saddr[i] & 0x6; // either 2 or 4
	}
	for (i=64;i>0;i--){
     7aa:	ee 16       	cp	r14, r30
     7ac:	ff 06       	cpc	r15, r31
     7ae:	a1 f7       	brne	.-24     	; 0x798 <search_rom+0xfc>
			saddr[i-1] |= 16; // mark last decision in the string
			break;
		}
			
	}
	return(more_to_do);
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <search_rom+0x12a>
	more_to_do = 0;
	for (i=0;i<64;i++){
		more_to_do |= saddr[i] & 0x6; // either 2 or 4
	}
	for (i=64;i>0;i--){
		if (saddr[i-1] & 2){
     7b2:	f8 01       	movw	r30, r16
     7b4:	97 ad       	ldd	r25, Z+63	; 0x3f
     7b6:	91 fd       	sbrc	r25, 1
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <search_rom+0x124>
     7ba:	01 5c       	subi	r16, 0xC1	; 193
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	ec cf       	rjmp	.-40     	; 0x798 <search_rom+0xfc>
     7c0:	f8 01       	movw	r30, r16
     7c2:	ff 96       	adiw	r30, 0x3f	; 63
     7c4:	ef cf       	rjmp	.-34     	; 0x7a4 <search_rom+0x108>
			break;
		}
			
	}
	return(more_to_do);
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	7f 90       	pop	r7
     7e0:	6f 90       	pop	r6
     7e2:	08 95       	ret

000007e4 <main>:

int i,j,k;
uint8_t more = 0;

int main(void)
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	c3 58       	subi	r28, 0x83	; 131
     7ee:	d1 09       	sbc	r29, r1
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
	uart_init(); // from serialCommunication, starts UART and redirects STDOUT/IN
     7fa:	0e 94 01 0a 	call	0x1402	; 0x1402 <uart_init>
	printf("\n");
     7fe:	8a e0       	ldi	r24, 0x0A	; 10
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
	printf("\n");
     806:	8a e0       	ldi	r24, 0x0A	; 10
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
	printf("\n");
     80e:	8a e0       	ldi	r24, 0x0A	; 10
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
	printf("\n");
     816:	8a e0       	ldi	r24, 0x0A	; 10
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
	
	avrPort * owChannel1;
	avrPort Channel1;
	owChannel1 = &Channel1;
	owChannel1->port=&PORTC;
     81e:	48 e2       	ldi	r20, 0x28	; 40
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	5a 83       	std	Y+2, r21	; 0x02
     824:	49 83       	std	Y+1, r20	; 0x01
	owChannel1->pin=&PINC;
     826:	26 e2       	ldi	r18, 0x26	; 38
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	3c 83       	std	Y+4, r19	; 0x04
     82c:	2b 83       	std	Y+3, r18	; 0x03
	owChannel1->ddr=&DDRC;
     82e:	87 e2       	ldi	r24, 0x27	; 39
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9e 83       	std	Y+6, r25	; 0x06
     834:	8d 83       	std	Y+5, r24	; 0x05
	owChannel1->mask=5;	
     836:	65 e0       	ldi	r22, 0x05	; 5
     838:	6f 83       	std	Y+7, r22	; 0x07

	avrPort * owChannel2;
	avrPort Channel2;
	owChannel2 = &Channel2;
	owChannel2->port=&PORTC;
     83a:	59 87       	std	Y+9, r21	; 0x09
     83c:	48 87       	std	Y+8, r20	; 0x08
	owChannel2->pin=&PINC;
     83e:	3b 87       	std	Y+11, r19	; 0x0b
     840:	2a 87       	std	Y+10, r18	; 0x0a
	owChannel2->ddr=&DDRC;
     842:	9d 87       	std	Y+13, r25	; 0x0d
     844:	8c 87       	std	Y+12, r24	; 0x0c
	owChannel2->mask=4;	
     846:	64 e0       	ldi	r22, 0x04	; 4
     848:	6e 87       	std	Y+14, r22	; 0x0e
	
	avrPort * owChannel3;
	avrPort Channel3;
	owChannel3 = &Channel3;
	owChannel3->port=&PORTC;
     84a:	58 8b       	std	Y+16, r21	; 0x10
     84c:	4f 87       	std	Y+15, r20	; 0x0f
	owChannel3->pin=&PINC;
     84e:	3a 8b       	std	Y+18, r19	; 0x12
     850:	29 8b       	std	Y+17, r18	; 0x11
	owChannel3->ddr=&DDRC;
     852:	9c 8b       	std	Y+20, r25	; 0x14
     854:	8b 8b       	std	Y+19, r24	; 0x13
	owChannel3->mask=3;	
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	8d 8b       	std	Y+21, r24	; 0x15
	
	avrPort * owChannel[3] = {owChannel1, owChannel2, owChannel3};
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	9f 8b       	std	Y+23, r25	; 0x17
     860:	8e 8b       	std	Y+22, r24	; 0x16
     862:	07 96       	adiw	r24, 0x07	; 7
     864:	99 8f       	std	Y+25, r25	; 0x19
     866:	88 8f       	std	Y+24, r24	; 0x18
     868:	07 96       	adiw	r24, 0x07	; 7
     86a:	9b 8f       	std	Y+27, r25	; 0x1b
     86c:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t * scope;
	uint8_t first = 1;
	
	uint8_t saddr[64];
	
	printf("The program was restarted ...\n\n");
     86e:	8e e0       	ldi	r24, 0x0E	; 14
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
	int active = 0;
	uint8_t my_addr[2][8];
	int prog_cntr = 0;
	uint8_t sp[10];
	uint8_t * scope;
	uint8_t first = 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
	int key_press;
	int conv_start = 0;
	int debug = 1;
	int active = 0;
	uint8_t my_addr[2][8];
	int prog_cntr = 0;
     878:	c1 2c       	mov	r12, r1
     87a:	d1 2c       	mov	r13, r1
	
	int rc;
	int key_press;
	int conv_start = 0;
	int debug = 1;
	int active = 0;
     87c:	61 2c       	mov	r6, r1
     87e:	71 2c       	mov	r7, r1
	//cbi(*owChannel[2]->port, owChannel[2]->mask);
	
	int rc;
	int key_press;
	int conv_start = 0;
	int debug = 1;
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	ea 96       	adiw	r28, 0x3a	; 58
     886:	3f af       	std	Y+63, r19	; 0x3f
     888:	2e af       	std	Y+62, r18	; 0x3e
     88a:	ea 97       	sbiw	r28, 0x3a	; 58
				printf("%u: SKIP_ROM: 0x%02x\n",prog_cntr, SKIP_ROM);
				transmit_data(SKIP_ROM,owChannel[active]);
				break;
			case 't':
				printf("%u: READ_SCRATCHPAD: 0x%02x\n",prog_cntr,READ_SCRATCHPAD);
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
     88c:	de 01       	movw	r26, r28
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	2d 01       	movw	r4, r26
     892:	7e 01       	movw	r14, r28
     894:	b6 e3       	ldi	r27, 0x36	; 54
     896:	eb 0e       	add	r14, r27
     898:	f1 1c       	adc	r15, r1
     89a:	fe 01       	movw	r30, r28
     89c:	ea 58       	subi	r30, 0x8A	; 138
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	e8 96       	adiw	r28, 0x38	; 56
     8a2:	ff af       	std	Y+63, r31	; 0x3f
     8a4:	ee af       	std	Y+62, r30	; 0x3e
     8a6:	e8 97       	sbiw	r28, 0x38	; 56
					more = search_rom(saddr, owChannel[active]);
					switch (more){
						case 0: case 2:
							for (i=0; i<8; i++){
								for (j=0;j<4;j++){
									printf("%u",saddr[i*8+4+3-j]>0);
     8a8:	0b e4       	ldi	r16, 0x4B	; 75
     8aa:	13 e0       	ldi	r17, 0x03	; 3
     8ac:	c0 58       	subi	r28, 0x80	; 128
     8ae:	df 4f       	sbci	r29, 0xFF	; 255
     8b0:	e8 82       	st	Y, r14
     8b2:	c0 58       	subi	r28, 0x80	; 128
     8b4:	d0 40       	sbci	r29, 0x00	; 0
     8b6:	cf 57       	subi	r28, 0x7F	; 127
     8b8:	df 4f       	sbci	r29, 0xFF	; 255
     8ba:	f8 82       	st	Y, r15
     8bc:	c1 58       	subi	r28, 0x81	; 129
     8be:	d0 40       	sbci	r29, 0x00	; 0
				printf("%u: SEARCH_ROM (0x%02x) on channel %u :  \n",prog_cntr,SEARCH_ROM,active+1);
				for (i=0;i<64;i++){
					saddr[i] = 4;
				}
				do {
					sensor_init(owChannel[active]);
     8c0:	ce 57       	subi	r28, 0x7E	; 126
     8c2:	df 4f       	sbci	r29, 0xFF	; 255
     8c4:	48 82       	st	Y, r4
     8c6:	c2 58       	subi	r28, 0x82	; 130
     8c8:	d0 40       	sbci	r29, 0x00	; 0
     8ca:	cd 57       	subi	r28, 0x7D	; 125
     8cc:	df 4f       	sbci	r29, 0xFF	; 255
     8ce:	58 82       	st	Y, r5
     8d0:	c3 58       	subi	r28, 0x83	; 131
     8d2:	d0 40       	sbci	r29, 0x00	; 0
     8d4:	13 01       	movw	r2, r6
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <main+0xf6>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
	printf("The program was restarted ...\n\n");
	
	while(1)
	{
		
		if (first){key_press = 'h'; first = 0;}
     8da:	81 11       	cpse	r24, r1
     8dc:	7c c5       	rjmp	.+2808   	; 0x13d6 <__stack+0xad7>
		else {key_press = wait_for_key(1);}
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	0e 94 19 0a 	call	0x1432	; 0x1432 <wait_for_key>
			
		prog_cntr++;
     8e4:	ff ef       	ldi	r31, 0xFF	; 255
     8e6:	cf 1a       	sub	r12, r31
     8e8:	df 0a       	sbc	r13, r31
		switch(key_press) {
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	fc 01       	movw	r30, r24
     8ee:	3d 97       	sbiw	r30, 0x0d	; 13
     8f0:	ec 36       	cpi	r30, 0x6C	; 108
     8f2:	f1 05       	cpc	r31, r1
     8f4:	88 f7       	brcc	.-30     	; 0x8d8 <main+0xf4>
     8f6:	ec 5c       	subi	r30, 0xCC	; 204
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__tablejump2__>
			case 'h': 
					printf("\n");
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
					// printf("s: SKIP_ROM (0x%02x)\n",SKIP_ROM);
					printf_P(PSTR("/: submitting the last read address with a MATCH_ROM\n"));
     906:	88 e5       	ldi	r24, 0x58	; 88
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("?: print the active channel\n"));
     912:	8b e3       	ldi	r24, 0x3B	; 59
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR(".: submitting READ_SCATCHPAD( 0x%02x)\n"),READ_SCRATCHPAD);
     91e:	1f 92       	push	r1
     920:	0f 2e       	mov	r0, r31
     922:	fe eb       	ldi	r31, 0xBE	; 190
     924:	bf 2e       	mov	r11, r31
     926:	f0 2d       	mov	r31, r0
     928:	bf 92       	push	r11
     92a:	84 e1       	ldi	r24, 0x14	; 20
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("0: write 0 to \n"));
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("1: write 1 to \n"));
     942:	84 ef       	ldi	r24, 0xF4	; 244
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("b: read 1 bit \n"));
     94e:	84 ee       	ldi	r24, 0xE4	; 228
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("a: READ_ROM (0x%02x)\n"),READ_ROM);
     95a:	1f 92       	push	r1
     95c:	83 e3       	ldi	r24, 0x33	; 51
     95e:	8f 93       	push	r24
     960:	8e ec       	ldi	r24, 0xCE	; 206
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("c: CONVERT_T (0x%02x) and wait 1ms\n"),CONVERT_T);
     96c:	1f 92       	push	r1
     96e:	84 e4       	ldi	r24, 0x44	; 68
     970:	8f 93       	push	r24
     972:	8a ea       	ldi	r24, 0xAA	; 170
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("d: toggle debug, currently debug is:%u\n"),debug);
     97e:	ea 96       	adiw	r28, 0x3a	; 58
     980:	2f ad       	ldd	r18, Y+63	; 0x3f
     982:	ea 97       	sbiw	r28, 0x3a	; 58
     984:	2f 93       	push	r18
     986:	e9 96       	adiw	r28, 0x39	; 57
     988:	3f ad       	ldd	r19, Y+63	; 0x3f
     98a:	e9 97       	sbiw	r28, 0x39	; 57
     98c:	3f 93       	push	r19
     98e:	82 e8       	ldi	r24, 0x82	; 130
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("e: temperature conversion without reading the status (good for parasite power)\n"));
     99a:	82 e3       	ldi	r24, 0x32	; 50
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	9f 93       	push	r25
     9a0:	8f 93       	push	r24
     9a2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("f: SEARCH_RIM (includes an init)\n"));
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("h: this help\n"));
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("i: initialize (reset)\n"));
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	8b ee       	ldi	r24, 0xEB	; 235
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("p: submit READ_POWER_SUPPLY (0x%02x)\n"),READ_POWER_SUPPLY);
     9d4:	1f 92       	push	r1
     9d6:	84 eb       	ldi	r24, 0xB4	; 180
     9d8:	8f 93       	push	r24
     9da:	85 ec       	ldi	r24, 0xC5	; 197
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					printf_P(PSTR("t: READ_SCRATCHPAD (0x%02x) , READ 2 bytes, print temperature\n"),READ_SCRATCHPAD);
     9e6:	1f 92       	push	r1
     9e8:	bf 92       	push	r11
     9ea:	86 e8       	ldi	r24, 0x86	; 134
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
				break;
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	6b cf       	rjmp	.-298    	; 0x8d8 <main+0xf4>
			case '0': 
					transmit_bit(0,owChannel[active]);
     a02:	f1 01       	movw	r30, r2
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e4 0d       	add	r30, r4
     a0a:	f5 1d       	adc	r31, r5
     a0c:	65 89       	ldd	r22, Z+21	; 0x15
     a0e:	76 89       	ldd	r23, Z+22	; 0x16
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
					printf("0");
     a16:	80 e3       	ldi	r24, 0x30	; 48
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
     a1e:	5c cf       	rjmp	.-328    	; 0x8d8 <main+0xf4>
			case '1':
					transmit_bit(1,owChannel[active]);
     a20:	f1 01       	movw	r30, r2
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	e4 0d       	add	r30, r4
     a28:	f5 1d       	adc	r31, r5
     a2a:	65 89       	ldd	r22, Z+21	; 0x15
     a2c:	76 89       	ldd	r23, Z+22	; 0x16
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 20 02 	call	0x440	; 0x440 <transmit_bit>
					printf("1");
     a34:	81 e3       	ldi	r24, 0x31	; 49
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
     a3c:	4d cf       	rjmp	.-358    	; 0x8d8 <main+0xf4>
			case ' ':
				printf(" ");
     a3e:	80 e2       	ldi	r24, 0x20	; 32
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
     a46:	48 cf       	rjmp	.-368    	; 0x8d8 <main+0xf4>
			case '.':
				printf("%u: send READ_SCRATCHPAD (0x%02x) to channels %u: 0x%02x\n",READ_SCRATCHPAD, active,prog_cntr,READ_SCRATCHPAD);
     a48:	1f 92       	push	r1
     a4a:	8e eb       	ldi	r24, 0xBE	; 190
     a4c:	8f 93       	push	r24
     a4e:	df 92       	push	r13
     a50:	cf 92       	push	r12
     a52:	3f 92       	push	r3
     a54:	2f 92       	push	r2
     a56:	1f 92       	push	r1
     a58:	8f 93       	push	r24
     a5a:	8d e2       	ldi	r24, 0x2D	; 45
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	9f 93       	push	r25
     a60:	8f 93       	push	r24
     a62:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
     a66:	f1 01       	movw	r30, r2
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	e4 0d       	add	r30, r4
     a6e:	f5 1d       	adc	r31, r5
     a70:	65 89       	ldd	r22, Z+21	; 0x15
     a72:	76 89       	ldd	r23, Z+22	; 0x16
     a74:	8e eb       	ldi	r24, 0xBE	; 190
     a76:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				break;
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	29 cf       	rjmp	.-430    	; 0x8d8 <main+0xf4>
					,my_addr[active][2]
					,my_addr[active][3]
					,my_addr[active][4]
					,my_addr[active][5]
					,my_addr[active][6]
					,my_addr[active][7]
     a86:	f1 01       	movw	r30, r2
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	e4 0d       	add	r30, r4
     a96:	f5 1d       	adc	r31, r5
     a98:	22 a1       	ldd	r18, Z+34	; 0x22
     a9a:	eb 96       	adiw	r28, 0x3b	; 59
     a9c:	2f af       	std	Y+63, r18	; 0x3f
     a9e:	eb 97       	sbiw	r28, 0x3b	; 59
					,my_addr[active][1]
					,my_addr[active][2]
					,my_addr[active][3]
					,my_addr[active][4]
					,my_addr[active][5]
					,my_addr[active][6]
     aa0:	91 a0       	ldd	r9, Z+33	; 0x21
					,my_addr[active][0]
					,my_addr[active][1]
					,my_addr[active][2]
					,my_addr[active][3]
					,my_addr[active][4]
					,my_addr[active][5]
     aa2:	80 a0       	ldd	r8, Z+32	; 0x20
					,MATCH_ROM
					,my_addr[active][0]
					,my_addr[active][1]
					,my_addr[active][2]
					,my_addr[active][3]
					,my_addr[active][4]
     aa4:	77 8c       	ldd	r7, Z+31	; 0x1f
				printf("MATCH_ROM (0x%02x), selecting  channel 1: %0x.%02x%02x%02x%02x%02x%02x%02x\n"
					,MATCH_ROM
					,my_addr[active][0]
					,my_addr[active][1]
					,my_addr[active][2]
					,my_addr[active][3]
     aa6:	66 8c       	ldd	r6, Z+30	; 0x1e
			case '/':
				printf("MATCH_ROM (0x%02x), selecting  channel 1: %0x.%02x%02x%02x%02x%02x%02x%02x\n"
					,MATCH_ROM
					,my_addr[active][0]
					,my_addr[active][1]
					,my_addr[active][2]
     aa8:	35 8d       	ldd	r19, Z+29	; 0x1d
     aaa:	ed 96       	adiw	r28, 0x3d	; 61
     aac:	3f af       	std	Y+63, r19	; 0x3f
     aae:	ed 97       	sbiw	r28, 0x3d	; 61
				break;
			case '/':
				printf("MATCH_ROM (0x%02x), selecting  channel 1: %0x.%02x%02x%02x%02x%02x%02x%02x\n"
					,MATCH_ROM
					,my_addr[active][0]
					,my_addr[active][1]
     ab0:	84 8d       	ldd	r24, Z+28	; 0x1c
     ab2:	ef 96       	adiw	r28, 0x3f	; 63
     ab4:	8f af       	std	Y+63, r24	; 0x3f
     ab6:	ef 97       	sbiw	r28, 0x3f	; 63
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
				break;
			case '/':
				printf("MATCH_ROM (0x%02x), selecting  channel 1: %0x.%02x%02x%02x%02x%02x%02x%02x\n"
					,MATCH_ROM
					,my_addr[active][0]
     ab8:	93 8d       	ldd	r25, Z+27	; 0x1b
     aba:	c1 58       	subi	r28, 0x81	; 129
     abc:	df 4f       	sbci	r29, 0xFF	; 255
     abe:	98 83       	st	Y, r25
     ac0:	cf 57       	subi	r28, 0x7F	; 127
     ac2:	d0 40       	sbci	r29, 0x00	; 0
			case '.':
				printf("%u: send READ_SCRATCHPAD (0x%02x) to channels %u: 0x%02x\n",READ_SCRATCHPAD, active,prog_cntr,READ_SCRATCHPAD);
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
				break;
			case '/':
				printf("MATCH_ROM (0x%02x), selecting  channel 1: %0x.%02x%02x%02x%02x%02x%02x%02x\n"
     ac4:	1f 92       	push	r1
     ac6:	2f 93       	push	r18
     ac8:	1f 92       	push	r1
     aca:	9f 92       	push	r9
     acc:	1f 92       	push	r1
     ace:	8f 92       	push	r8
     ad0:	1f 92       	push	r1
     ad2:	7f 92       	push	r7
     ad4:	1f 92       	push	r1
     ad6:	6f 92       	push	r6
     ad8:	1f 92       	push	r1
     ada:	3f 93       	push	r19
     adc:	1f 92       	push	r1
     ade:	8f 93       	push	r24
     ae0:	1f 92       	push	r1
     ae2:	9f 93       	push	r25
     ae4:	1f 92       	push	r1
     ae6:	85 e5       	ldi	r24, 0x55	; 85
     ae8:	8f 93       	push	r24
     aea:	87 e6       	ldi	r24, 0x67	; 103
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
					,my_addr[active][4]
					,my_addr[active][5]
					,my_addr[active][6]
					,my_addr[active][7]
					);
					transmit_data(MATCH_ROM,owChannel1); 
     af6:	ce 57       	subi	r28, 0x7E	; 126
     af8:	df 4f       	sbci	r29, 0xFF	; 255
     afa:	68 81       	ld	r22, Y
     afc:	c2 58       	subi	r28, 0x82	; 130
     afe:	d0 40       	sbci	r29, 0x00	; 0
     b00:	cd 57       	subi	r28, 0x7D	; 125
     b02:	df 4f       	sbci	r29, 0xFF	; 255
     b04:	78 81       	ld	r23, Y
     b06:	c3 58       	subi	r28, 0x83	; 131
     b08:	d0 40       	sbci	r29, 0x00	; 0
     b0a:	85 e5       	ldi	r24, 0x55	; 85
     b0c:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][0],owChannel[active]); 
     b10:	f1 01       	movw	r30, r2
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	e4 0d       	add	r30, r4
     b18:	f5 1d       	adc	r31, r5
     b1a:	a5 88       	ldd	r10, Z+21	; 0x15
     b1c:	b6 88       	ldd	r11, Z+22	; 0x16
     b1e:	b5 01       	movw	r22, r10
     b20:	c1 58       	subi	r28, 0x81	; 129
     b22:	df 4f       	sbci	r29, 0xFF	; 255
     b24:	88 81       	ld	r24, Y
     b26:	cf 57       	subi	r28, 0x7F	; 127
     b28:	d0 40       	sbci	r29, 0x00	; 0
     b2a:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][1],owChannel[active]); 
     b2e:	b5 01       	movw	r22, r10
     b30:	ef 96       	adiw	r28, 0x3f	; 63
     b32:	8f ad       	ldd	r24, Y+63	; 0x3f
     b34:	ef 97       	sbiw	r28, 0x3f	; 63
     b36:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][2],owChannel[active]); 
     b3a:	b5 01       	movw	r22, r10
     b3c:	ed 96       	adiw	r28, 0x3d	; 61
     b3e:	8f ad       	ldd	r24, Y+63	; 0x3f
     b40:	ed 97       	sbiw	r28, 0x3d	; 61
     b42:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][3],owChannel[active]); 
     b46:	b5 01       	movw	r22, r10
     b48:	86 2d       	mov	r24, r6
     b4a:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][4],owChannel[active]); 
     b4e:	b5 01       	movw	r22, r10
     b50:	87 2d       	mov	r24, r7
     b52:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][5],owChannel[active]); 
     b56:	b5 01       	movw	r22, r10
     b58:	88 2d       	mov	r24, r8
     b5a:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][6],owChannel[active]); 
     b5e:	b5 01       	movw	r22, r10
     b60:	89 2d       	mov	r24, r9
     b62:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
					transmit_data(my_addr[active][7],owChannel[active]); 
     b66:	b5 01       	movw	r22, r10
     b68:	eb 96       	adiw	r28, 0x3b	; 59
     b6a:	8f ad       	ldd	r24, Y+63	; 0x3f
     b6c:	eb 97       	sbiw	r28, 0x3b	; 59
     b6e:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				break;
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	ad ce       	rjmp	.-678    	; 0x8d8 <main+0xf4>
			case '?':
				printf("active channel is %u\n",active+1);
     b7e:	c1 01       	movw	r24, r2
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	83 eb       	ldi	r24, 0xB3	; 179
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	9f 93       	push	r25
     b8c:	8f 93       	push	r24
     b8e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	9e ce       	rjmp	.-708    	; 0x8d8 <main+0xf4>
			case 'a': 
				printf("%u: READ_ROM channel %u: 0x%02x\n",prog_cntr,active,READ_ROM);
     b9c:	1f 92       	push	r1
     b9e:	83 e3       	ldi	r24, 0x33	; 51
     ba0:	8f 93       	push	r24
     ba2:	3f 92       	push	r3
     ba4:	2f 92       	push	r2
     ba6:	df 92       	push	r13
     ba8:	cf 92       	push	r12
     baa:	89 ec       	ldi	r24, 0xC9	; 201
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				printf("reading address: ");
     bb6:	8a ee       	ldi	r24, 0xEA	; 234
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	9f 93       	push	r25
     bbc:	8f 93       	push	r24
     bbe:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				transmit_data(READ_ROM,owChannel[active]); 
     bc2:	f1 01       	movw	r30, r2
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e4 0d       	add	r30, r4
     bca:	f5 1d       	adc	r31, r5
     bcc:	65 88       	ldd	r6, Z+21	; 0x15
     bce:	76 88       	ldd	r7, Z+22	; 0x16
     bd0:	b3 01       	movw	r22, r6
     bd2:	83 e3       	ldi	r24, 0x33	; 51
     bd4:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				for (i=0; i<8; i++){
     bd8:	10 92 8c 06 	sts	0x068C, r1
     bdc:	10 92 8b 06 	sts	0x068B, r1
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	a1 2c       	mov	r10, r1
     bec:	b1 2c       	mov	r11, r1
					my_addr[active][i] = read_data(owChannel[active]);
     bee:	41 01       	movw	r8, r2
     bf0:	88 0c       	add	r8, r8
     bf2:	99 1c       	adc	r9, r9
     bf4:	88 0c       	add	r8, r8
     bf6:	99 1c       	adc	r9, r9
     bf8:	88 0c       	add	r8, r8
     bfa:	99 1c       	adc	r9, r9
     bfc:	84 0c       	add	r8, r4
     bfe:	95 1c       	adc	r9, r5
     c00:	c3 01       	movw	r24, r6
     c02:	0e 94 96 02 	call	0x52c	; 0x52c <read_data>
     c06:	f4 01       	movw	r30, r8
     c08:	ea 0d       	add	r30, r10
     c0a:	fb 1d       	adc	r31, r11
     c0c:	83 8f       	std	Z+27, r24	; 0x1b
				break;
			case 'a': 
				printf("%u: READ_ROM channel %u: 0x%02x\n",prog_cntr,active,READ_ROM);
				printf("reading address: ");
				transmit_data(READ_ROM,owChannel[active]); 
				for (i=0; i<8; i++){
     c0e:	a0 90 8b 06 	lds	r10, 0x068B
     c12:	b0 90 8c 06 	lds	r11, 0x068C
     c16:	ff ef       	ldi	r31, 0xFF	; 255
     c18:	af 1a       	sub	r10, r31
     c1a:	bf 0a       	sbc	r11, r31
     c1c:	b0 92 8c 06 	sts	0x068C, r11
     c20:	a0 92 8b 06 	sts	0x068B, r10
     c24:	28 e0       	ldi	r18, 0x08	; 8
     c26:	a2 16       	cp	r10, r18
     c28:	b1 04       	cpc	r11, r1
     c2a:	54 f3       	brlt	.-44     	; 0xc00 <__stack+0x301>
					my_addr[active][i] = read_data(owChannel[active]);
				}
				for (i=0; i<8; i++){
     c2c:	10 92 8c 06 	sts	0x068C, r1
     c30:	10 92 8b 06 	sts	0x068B, r1
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
					printf("%02x",my_addr[active][i]);
     c38:	41 01       	movw	r8, r2
     c3a:	88 0c       	add	r8, r8
     c3c:	99 1c       	adc	r9, r9
     c3e:	88 0c       	add	r8, r8
     c40:	99 1c       	adc	r9, r9
     c42:	88 0c       	add	r8, r8
     c44:	99 1c       	adc	r9, r9
     c46:	84 0c       	add	r8, r4
     c48:	95 1c       	adc	r9, r5
     c4a:	0f 2e       	mov	r0, r31
     c4c:	ff ef       	ldi	r31, 0xFF	; 255
     c4e:	af 2e       	mov	r10, r31
     c50:	f1 e0       	ldi	r31, 0x01	; 1
     c52:	bf 2e       	mov	r11, r31
     c54:	f0 2d       	mov	r31, r0
     c56:	f4 01       	movw	r30, r8
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c5e:	1f 92       	push	r1
     c60:	8f 93       	push	r24
     c62:	bf 92       	push	r11
     c64:	af 92       	push	r10
     c66:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				printf("reading address: ");
				transmit_data(READ_ROM,owChannel[active]); 
				for (i=0; i<8; i++){
					my_addr[active][i] = read_data(owChannel[active]);
				}
				for (i=0; i<8; i++){
     c6a:	80 91 8b 06 	lds	r24, 0x068B
     c6e:	90 91 8c 06 	lds	r25, 0x068C
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	90 93 8c 06 	sts	0x068C, r25
     c78:	80 93 8b 06 	sts	0x068B, r24
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	88 30       	cpi	r24, 0x08	; 8
     c86:	91 05       	cpc	r25, r1
     c88:	34 f3       	brlt	.-52     	; 0xc56 <__stack+0x357>
					printf("%02x",my_addr[active][i]);
				}
				printf("\n");
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
     c92:	22 ce       	rjmp	.-956    	; 0x8d8 <main+0xf4>
			case (char) 13:
				printf("\n");
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
     c9c:	1d ce       	rjmp	.-966    	; 0x8d8 <main+0xf4>
			case 'B':
				printf(" 0x%02x",read_data(owChannel[active]));
     c9e:	f1 01       	movw	r30, r2
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e4 0d       	add	r30, r4
     ca6:	f5 1d       	adc	r31, r5
     ca8:	85 89       	ldd	r24, Z+21	; 0x15
     caa:	96 89       	ldd	r25, Z+22	; 0x16
     cac:	0e 94 96 02 	call	0x52c	; 0x52c <read_data>
     cb0:	1f 92       	push	r1
     cb2:	8f 93       	push	r24
     cb4:	8c ef       	ldi	r24, 0xFC	; 252
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	07 ce       	rjmp	.-1010   	; 0x8d8 <main+0xf4>
			case 'b':
				printf("%x",read_bit(owChannel[active]));
     cca:	f1 01       	movw	r30, r2
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	e4 0d       	add	r30, r4
     cd2:	f5 1d       	adc	r31, r5
     cd4:	85 89       	ldd	r24, Z+21	; 0x15
     cd6:	96 89       	ldd	r25, Z+22	; 0x16
     cd8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_bit>
     cdc:	1f 92       	push	r1
     cde:	8f 93       	push	r24
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	f1 cd       	rjmp	.-1054   	; 0x8d8 <main+0xf4>
			case 'c':
				printf("%u: CONVERT_T: 0x%02x\n",prog_cntr,CONVERT_T);
     cf6:	1f 92       	push	r1
     cf8:	84 e4       	ldi	r24, 0x44	; 68
     cfa:	8f 93       	push	r24
     cfc:	df 92       	push	r13
     cfe:	cf 92       	push	r12
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	9f 93       	push	r25
     d06:	8f 93       	push	r24
     d08:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				conv_start = 0;
				transmit_data(CONVERT_T,owChannel[active]); // Tell the sensor to prepare the data, 0x44 = 68
     d0c:	f1 01       	movw	r30, r2
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	e4 0d       	add	r30, r4
     d14:	f5 1d       	adc	r31, r5
     d16:	85 88       	ldd	r8, Z+21	; 0x15
     d18:	96 88       	ldd	r9, Z+22	; 0x16
     d1a:	b4 01       	movw	r22, r8
     d1c:	84 e4       	ldi	r24, 0x44	; 68
     d1e:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				
				// drive  low z '1' for parasite power devices
				sbi(*owChannel[2]->ddr, owChannel[2]->mask);
     d22:	eb 89       	ldd	r30, Y+19	; 0x13
     d24:	fc 89       	ldd	r31, Y+20	; 0x14
     d26:	40 81       	ld	r20, Z
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9c 01       	movw	r18, r24
     d2e:	0d 88       	ldd	r0, Y+21	; 0x15
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <__stack+0x437>
     d32:	22 0f       	add	r18, r18
     d34:	33 1f       	adc	r19, r19
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <__stack+0x433>
     d3a:	24 2b       	or	r18, r20
     d3c:	20 83       	st	Z, r18
				sbi(*owChannel[2]->port, owChannel[2]->mask);
     d3e:	ef 85       	ldd	r30, Y+15	; 0x0f
     d40:	f8 89       	ldd	r31, Y+16	; 0x10
     d42:	20 81       	ld	r18, Z
     d44:	0d 88       	ldd	r0, Y+21	; 0x15
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <__stack+0x44d>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <__stack+0x449>
     d50:	82 2b       	or	r24, r18
     d52:	80 83       	st	Z, r24
     d54:	8f ec       	ldi	r24, 0xCF	; 207
     d56:	97 e0       	ldi	r25, 0x07	; 7
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <__stack+0x459>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <__stack+0x45f>
     d5e:	00 00       	nop
				
				// how soon after receiving CONVERT_T does it actually start?
				_delay_us(1000); 
				
				if (!read_bit(owChannel[active])){conv_start = 1;}
     d60:	c4 01       	movw	r24, r8
     d62:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_bit>
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	81 11       	cpse	r24, r1
     d78:	20 e0       	ldi	r18, 0x00	; 0
			case 'b':
				printf("%x",read_bit(owChannel[active]));
				break;
			case 'c':
				printf("%u: CONVERT_T: 0x%02x\n",prog_cntr,CONVERT_T);
				conv_start = 0;
     d7a:	a2 2e       	mov	r10, r18
     d7c:	b9 2e       	mov	r11, r25
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <__stack+0x48f>
				// how soon after receiving CONVERT_T does it actually start?
				_delay_us(1000); 
				
				if (!read_bit(owChannel[active])){conv_start = 1;}
				while (!read_bit(owChannel[active])){
					conv_start++;
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	a9 1a       	sub	r10, r25
     d84:	b9 0a       	sbc	r11, r25
     d86:	aa e1       	ldi	r26, 0x1A	; 26
     d88:	aa 95       	dec	r26
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <__stack+0x489>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <__stack+0x48f>
				
				// how soon after receiving CONVERT_T does it actually start?
				_delay_us(1000); 
				
				if (!read_bit(owChannel[active])){conv_start = 1;}
				while (!read_bit(owChannel[active])){
     d8e:	c4 01       	movw	r24, r8
     d90:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_bit>
     d94:	88 23       	and	r24, r24
     d96:	a1 f3       	breq	.-24     	; 0xd80 <__stack+0x481>
					conv_start++;
					_delay_us(10); 
				}
				
				cbi(*owChannel[2]->ddr, owChannel[2]->mask);
     d98:	eb 89       	ldd	r30, Y+19	; 0x13
     d9a:	fc 89       	ldd	r31, Y+20	; 0x14
     d9c:	30 81       	ld	r19, Z
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	ac 01       	movw	r20, r24
     da4:	0d 88       	ldd	r0, Y+21	; 0x15
     da6:	02 c0       	rjmp	.+4      	; 0xdac <__stack+0x4ad>
     da8:	44 0f       	add	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <__stack+0x4a9>
     db0:	24 2f       	mov	r18, r20
     db2:	20 95       	com	r18
     db4:	23 23       	and	r18, r19
     db6:	20 83       	st	Z, r18
				cbi(*owChannel[2]->port, owChannel[2]->mask);
     db8:	ef 85       	ldd	r30, Y+15	; 0x0f
     dba:	f8 89       	ldd	r31, Y+16	; 0x10
     dbc:	20 81       	ld	r18, Z
     dbe:	0d 88       	ldd	r0, Y+21	; 0x15
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <__stack+0x4c7>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <__stack+0x4c3>
     dca:	80 95       	com	r24
     dcc:	82 23       	and	r24, r18
     dce:	80 83       	st	Z, r24
				
				if (conv_start){ printf("The temperature conversion completed after %u loops.\n",conv_start);}
     dd0:	a1 14       	cp	r10, r1
     dd2:	b1 04       	cpc	r11, r1
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <__stack+0x4f1>
     dd6:	bf 92       	push	r11
     dd8:	af 92       	push	r10
     dda:	8e e1       	ldi	r24, 0x1E	; 30
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	9f 93       	push	r25
     de0:	8f 93       	push	r24
     de2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	74 cd       	rjmp	.-1304   	; 0x8d8 <main+0xf4>
				else {printf("The temperature conversion never started!\n");}
     df0:	84 e5       	ldi	r24, 0x54	; 84
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
     df8:	6f cd       	rjmp	.-1314   	; 0x8d8 <main+0xf4>
				
				break;
			case 'd':
				debug = !debug;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	ea 96       	adiw	r28, 0x3a	; 58
     dfe:	ee ad       	ldd	r30, Y+62	; 0x3e
     e00:	ff ad       	ldd	r31, Y+63	; 0x3f
     e02:	ea 97       	sbiw	r28, 0x3a	; 58
     e04:	ef 2b       	or	r30, r31
     e06:	09 f0       	breq	.+2      	; 0xe0a <__stack+0x50b>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	ea 96       	adiw	r28, 0x3a	; 58
     e10:	3f af       	std	Y+63, r19	; 0x3f
     e12:	2e af       	std	Y+62, r18	; 0x3e
     e14:	ea 97       	sbiw	r28, 0x3a	; 58
				printf("debug = %u\n",debug);
     e16:	1f 92       	push	r1
     e18:	8f 93       	push	r24
     e1a:	8e e7       	ldi	r24, 0x7E	; 126
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	9f 93       	push	r25
     e20:	8f 93       	push	r24
     e22:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	54 cd       	rjmp	.-1368   	; 0x8d8 <main+0xf4>
			case 'e':
				printf("%u: CONVERT_T (0x%02x) on channel %u without reading status (good for parasite power)\n",prog_cntr,CONVERT_T,active+1);
     e30:	c1 01       	movw	r24, r2
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9f 93       	push	r25
     e36:	8f 93       	push	r24
     e38:	1f 92       	push	r1
     e3a:	84 e4       	ldi	r24, 0x44	; 68
     e3c:	8f 93       	push	r24
     e3e:	df 92       	push	r13
     e40:	cf 92       	push	r12
     e42:	8a e8       	ldi	r24, 0x8A	; 138
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				conv_start = 0;
				transmit_data(CONVERT_T,owChannel[active]); // Tell the sensor to prepare the data, 0x44 = 68
     e4e:	f1 01       	movw	r30, r2
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e4 0d       	add	r30, r4
     e56:	f5 1d       	adc	r31, r5
     e58:	65 89       	ldd	r22, Z+21	; 0x15
     e5a:	76 89       	ldd	r23, Z+22	; 0x16
     e5c:	84 e4       	ldi	r24, 0x44	; 68
     e5e:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				printf("the conversion was started.\n");
     e62:	81 ee       	ldi	r24, 0xE1	; 225
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e6a:	3f ef       	ldi	r19, 0xFF	; 255
     e6c:	89 e6       	ldi	r24, 0x69	; 105
     e6e:	98 e1       	ldi	r25, 0x18	; 24
     e70:	31 50       	subi	r19, 0x01	; 1
     e72:	80 40       	sbci	r24, 0x00	; 0
     e74:	90 40       	sbci	r25, 0x00	; 0
     e76:	e1 f7       	brne	.-8      	; 0xe70 <__stack+0x571>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <__stack+0x57b>
     e7a:	00 00       	nop
				_delay_ms(1000);
				printf("the conversion SHOULD be done now.\n");
     e7c:	8d ef       	ldi	r24, 0xFD	; 253
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
				break;
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	24 cd       	rjmp	.-1464   	; 0x8d8 <main+0xf4>
			case 'f':
				printf("%u: SEARCH_ROM (0x%02x) on channel %u :  \n",prog_cntr,SEARCH_ROM,active+1);
     e90:	c1 01       	movw	r24, r2
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	9f 93       	push	r25
     e96:	8f 93       	push	r24
     e98:	1f 92       	push	r1
     e9a:	80 ef       	ldi	r24, 0xF0	; 240
     e9c:	8f 93       	push	r24
     e9e:	df 92       	push	r13
     ea0:	cf 92       	push	r12
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	9f 93       	push	r25
     ea8:	8f 93       	push	r24
     eaa:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
     eae:	f7 01       	movw	r30, r14
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
				for (i=0;i<64;i++){
					saddr[i] = 4;
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	81 93       	st	Z+, r24
				_delay_ms(1000);
				printf("the conversion SHOULD be done now.\n");
				break;
			case 'f':
				printf("%u: SEARCH_ROM (0x%02x) on channel %u :  \n",prog_cntr,SEARCH_ROM,active+1);
				for (i=0;i<64;i++){
     ebe:	e8 96       	adiw	r28, 0x38	; 56
     ec0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ec2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ec4:	e8 97       	sbiw	r28, 0x38	; 56
     ec6:	ea 17       	cp	r30, r26
     ec8:	fb 07       	cpc	r31, r27
     eca:	c1 f7       	brne	.-16     	; 0xebc <__stack+0x5bd>
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	90 93 8c 06 	sts	0x068C, r25
     ed4:	80 93 8b 06 	sts	0x068B, r24
					saddr[i] = 4;
				}
				do {
					sensor_init(owChannel[active]);
     ed8:	41 01       	movw	r8, r2
     eda:	88 0c       	add	r8, r8
     edc:	99 1c       	adc	r9, r9
     ede:	84 0c       	add	r8, r4
     ee0:	95 1c       	adc	r9, r5
     ee2:	b5 e1       	ldi	r27, 0x15	; 21
     ee4:	8b 0e       	add	r8, r27
     ee6:	91 1c       	adc	r9, r1
					more = search_rom(saddr, owChannel[active]);
					switch (more){
						case 0: case 2:
							for (i=0; i<8; i++){
								for (j=0;j<4;j++){
									printf("%u",saddr[i*8+4+3-j]>0);
     ee8:	66 24       	eor	r6, r6
     eea:	63 94       	inc	r6
     eec:	71 2c       	mov	r7, r1
								printf(" ");
							}
							printf("\n");
							break;
						case 8:
							printf_P(PSTR("there are no devices on this channel.\n"));
     eee:	ec 96       	adiw	r28, 0x3c	; 60
     ef0:	df ae       	std	Y+63, r13	; 0x3f
     ef2:	ce ae       	std	Y+62, r12	; 0x3e
     ef4:	ec 97       	sbiw	r28, 0x3c	; 60
     ef6:	ee 96       	adiw	r28, 0x3e	; 62
     ef8:	5f ae       	std	Y+63, r5	; 0x3f
     efa:	4e ae       	std	Y+62, r4	; 0x3e
     efc:	ee 97       	sbiw	r28, 0x3e	; 62
     efe:	c0 58       	subi	r28, 0x80	; 128
     f00:	df 4f       	sbci	r29, 0xFF	; 255
     f02:	58 80       	ld	r5, Y
     f04:	c0 58       	subi	r28, 0x80	; 128
     f06:	d0 40       	sbci	r29, 0x00	; 0
     f08:	cf 57       	subi	r28, 0x7F	; 127
     f0a:	df 4f       	sbci	r29, 0xFF	; 255
     f0c:	d8 80       	ld	r13, Y
     f0e:	c1 58       	subi	r28, 0x81	; 129
     f10:	d0 40       	sbci	r29, 0x00	; 0
				printf("%u: SEARCH_ROM (0x%02x) on channel %u :  \n",prog_cntr,SEARCH_ROM,active+1);
				for (i=0;i<64;i++){
					saddr[i] = 4;
				}
				do {
					sensor_init(owChannel[active]);
     f12:	f4 01       	movw	r30, r8
     f14:	a0 80       	ld	r10, Z
     f16:	b1 80       	ldd	r11, Z+1	; 0x01
     f18:	c5 01       	movw	r24, r10
     f1a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <sensor_init>
					more = search_rom(saddr, owChannel[active]);
     f1e:	b5 01       	movw	r22, r10
     f20:	85 2d       	mov	r24, r5
     f22:	9d 2d       	mov	r25, r13
     f24:	0e 94 4e 03 	call	0x69c	; 0x69c <search_rom>
     f28:	80 93 86 06 	sts	0x0686, r24
					switch (more){
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__stack+0x63b>
     f30:	88 30       	cpi	r24, 0x08	; 8
     f32:	09 f4       	brne	.+2      	; 0xf36 <__stack+0x637>
     f34:	7f c0       	rjmp	.+254    	; 0x1034 <__stack+0x735>
     f36:	81 11       	cpse	r24, r1
     f38:	85 c0       	rjmp	.+266    	; 0x1044 <__stack+0x745>
						case 0: case 2:
							for (i=0; i<8; i++){
     f3a:	10 92 8c 06 	sts	0x068C, r1
     f3e:	10 92 8b 06 	sts	0x068B, r1
								for (j=0;j<4;j++){
     f42:	10 92 88 06 	sts	0x0688, r1
     f46:	10 92 87 06 	sts	0x0687, r1
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
									printf("%u",saddr[i*8+4+3-j]>0);
     f4e:	e0 91 8b 06 	lds	r30, 0x068B
     f52:	f0 91 8c 06 	lds	r31, 0x068C
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	37 96       	adiw	r30, 0x07	; 7
     f64:	e2 1b       	sub	r30, r18
     f66:	f3 0b       	sbc	r31, r19
     f68:	ee 0d       	add	r30, r14
     f6a:	ff 1d       	adc	r31, r15
     f6c:	86 2d       	mov	r24, r6
     f6e:	97 2d       	mov	r25, r7
     f70:	20 81       	ld	r18, Z
     f72:	21 11       	cpse	r18, r1
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <__stack+0x679>
     f76:	87 2d       	mov	r24, r7
     f78:	9f 93       	push	r25
     f7a:	8f 93       	push	r24
     f7c:	1f 93       	push	r17
     f7e:	0f 93       	push	r16
     f80:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
					sensor_init(owChannel[active]);
					more = search_rom(saddr, owChannel[active]);
					switch (more){
						case 0: case 2:
							for (i=0; i<8; i++){
								for (j=0;j<4;j++){
     f84:	20 91 87 06 	lds	r18, 0x0687
     f88:	30 91 88 06 	lds	r19, 0x0688
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	30 93 88 06 	sts	0x0688, r19
     f94:	20 93 87 06 	sts	0x0687, r18
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	24 30       	cpi	r18, 0x04	; 4
     fa2:	31 05       	cpc	r19, r1
     fa4:	a4 f2       	brlt	.-88     	; 0xf4e <__stack+0x64f>
									printf("%u",saddr[i*8+4+3-j]>0);
								}
								for (j=0;j<4;j++){
     fa6:	10 92 88 06 	sts	0x0688, r1
     faa:	10 92 87 06 	sts	0x0687, r1
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
									printf("%u",saddr[i*8+3-j]>0);
     fb2:	e0 91 8b 06 	lds	r30, 0x068B
     fb6:	f0 91 8c 06 	lds	r31, 0x068C
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	33 96       	adiw	r30, 0x03	; 3
     fc8:	e2 1b       	sub	r30, r18
     fca:	f3 0b       	sbc	r31, r19
     fcc:	ee 0d       	add	r30, r14
     fce:	ff 1d       	adc	r31, r15
     fd0:	26 2d       	mov	r18, r6
     fd2:	87 2d       	mov	r24, r7
     fd4:	90 81       	ld	r25, Z
     fd6:	91 11       	cpse	r25, r1
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <__stack+0x6dd>
     fda:	27 2d       	mov	r18, r7
     fdc:	8f 93       	push	r24
     fde:	2f 93       	push	r18
     fe0:	1f 93       	push	r17
     fe2:	0f 93       	push	r16
     fe4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
						case 0: case 2:
							for (i=0; i<8; i++){
								for (j=0;j<4;j++){
									printf("%u",saddr[i*8+4+3-j]>0);
								}
								for (j=0;j<4;j++){
     fe8:	20 91 87 06 	lds	r18, 0x0687
     fec:	30 91 88 06 	lds	r19, 0x0688
     ff0:	2f 5f       	subi	r18, 0xFF	; 255
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	30 93 88 06 	sts	0x0688, r19
     ff8:	20 93 87 06 	sts	0x0687, r18
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	24 30       	cpi	r18, 0x04	; 4
    1006:	31 05       	cpc	r19, r1
    1008:	a4 f2       	brlt	.-88     	; 0xfb2 <__stack+0x6b3>
									printf("%u",saddr[i*8+3-j]>0);
								}
								printf(" ");
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				do {
					sensor_init(owChannel[active]);
					more = search_rom(saddr, owChannel[active]);
					switch (more){
						case 0: case 2:
							for (i=0; i<8; i++){
    1012:	80 91 8b 06 	lds	r24, 0x068B
    1016:	90 91 8c 06 	lds	r25, 0x068C
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	90 93 8c 06 	sts	0x068C, r25
    1020:	80 93 8b 06 	sts	0x068B, r24
    1024:	08 97       	sbiw	r24, 0x08	; 8
    1026:	0c f4       	brge	.+2      	; 0x102a <__stack+0x72b>
    1028:	8c cf       	rjmp	.-232    	; 0xf42 <__stack+0x643>
								for (j=0;j<4;j++){
									printf("%u",saddr[i*8+3-j]>0);
								}
								printf(" ");
							}
							printf("\n");
    102a:	8a e0       	ldi	r24, 0x0A	; 10
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
							break;
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <__stack+0x745>
						case 8:
							printf_P(PSTR("there are no devices on this channel.\n"));
    1034:	af e5       	ldi	r26, 0x5F	; 95
    1036:	b1 e0       	ldi	r27, 0x01	; 1
    1038:	bf 93       	push	r27
    103a:	af 93       	push	r26
    103c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
							break;
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
					}
						
				} while (more & 0x6);
    1044:	80 91 86 06 	lds	r24, 0x0686
    1048:	86 70       	andi	r24, 0x06	; 6
    104a:	09 f0       	breq	.+2      	; 0x104e <__stack+0x74f>
    104c:	62 cf       	rjmp	.-316    	; 0xf12 <__stack+0x613>
    104e:	ec 96       	adiw	r28, 0x3c	; 60
    1050:	ce ac       	ldd	r12, Y+62	; 0x3e
    1052:	df ac       	ldd	r13, Y+63	; 0x3f
    1054:	ec 97       	sbiw	r28, 0x3c	; 60
    1056:	ee 96       	adiw	r28, 0x3e	; 62
    1058:	4e ac       	ldd	r4, Y+62	; 0x3e
    105a:	5f ac       	ldd	r5, Y+63	; 0x3f
    105c:	ee 97       	sbiw	r28, 0x3e	; 62
				printf_P(PSTR("all addresses found\n"));
    105e:	8a e4       	ldi	r24, 0x4A	; 74
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	9f 93       	push	r25
    1064:	8f 93       	push	r24
    1066:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <printf_P>
					}
					printf("%x ",k);
				}
				printf("\n");
				*/
				break;
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	34 cc       	rjmp	.-1944   	; 0x8d8 <main+0xf4>
			case 'i':
				printf("%u: reset/presence detect on channel %u \n",prog_cntr,active+1);
    1070:	c1 01       	movw	r24, r2
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	9f 93       	push	r25
    1076:	8f 93       	push	r24
    1078:	df 92       	push	r13
    107a:	cf 92       	push	r12
    107c:	8e e4       	ldi	r24, 0x4E	; 78
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	9f 93       	push	r25
    1082:	8f 93       	push	r24
    1084:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				rc= sensor_init(owChannel[active]);
    1088:	f1 01       	movw	r30, r2
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	e4 0d       	add	r30, r4
    1090:	f5 1d       	adc	r31, r5
    1092:	85 89       	ldd	r24, Z+21	; 0x15
    1094:	96 89       	ldd	r25, Z+22	; 0x16
    1096:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <sensor_init>
				if(rc)
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	88 23       	and	r24, r24
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <__stack+0x7c5>
				{
					printf("     -> sensor init failed with return code %u\n",rc);
    10aa:	1f 92       	push	r1
    10ac:	8f 93       	push	r24
    10ae:	88 e7       	ldi	r24, 0x78	; 120
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	9f 93       	push	r25
    10b4:	8f 93       	push	r24
    10b6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0a cc       	rjmp	.-2028   	; 0x8d8 <main+0xf4>
				}
				else
				{
					if (debug) {
    10c4:	ea 96       	adiw	r28, 0x3a	; 58
    10c6:	2e ad       	ldd	r18, Y+62	; 0x3e
    10c8:	3f ad       	ldd	r19, Y+63	; 0x3f
    10ca:	ea 97       	sbiw	r28, 0x3a	; 58
    10cc:	23 2b       	or	r18, r19
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <__stack+0x7d3>
    10d0:	03 cc       	rjmp	.-2042   	; 0x8d8 <main+0xf4>
						printf("    -> sensor init succeeded\n");
    10d2:	88 ea       	ldi	r24, 0xA8	; 168
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
    10da:	fe cb       	rjmp	.-2052   	; 0x8d8 <main+0xf4>
					}
				}
				break;
			case 'j':
				scope = debug_sensor_init(owChannel[active]);
    10dc:	f1 01       	movw	r30, r2
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	e4 0d       	add	r30, r4
    10e4:	f5 1d       	adc	r31, r5
    10e6:	85 89       	ldd	r24, Z+21	; 0x15
    10e8:	96 89       	ldd	r25, Z+22	; 0x16
    10ea:	0e 94 21 03 	call	0x642	; 0x642 <debug_sensor_init>
    10ee:	5c 01       	movw	r10, r24
				for (i=0; i<480; i++){
    10f0:	10 92 8c 06 	sts	0x068C, r1
    10f4:	10 92 8b 06 	sts	0x068B, r1
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
					
					if (!(i % 100)){printf("\n%03u : ",i);}
    10fc:	0f 2e       	mov	r0, r31
    10fe:	f4 e6       	ldi	r31, 0x64	; 100
    1100:	6f 2e       	mov	r6, r31
    1102:	71 2c       	mov	r7, r1
    1104:	f0 2d       	mov	r31, r0
    1106:	0f 2e       	mov	r0, r31
    1108:	f5 ec       	ldi	r31, 0xC5	; 197
    110a:	8f 2e       	mov	r8, r31
    110c:	f3 e0       	ldi	r31, 0x03	; 3
    110e:	9f 2e       	mov	r9, r31
    1110:	f0 2d       	mov	r31, r0
    1112:	c9 01       	movw	r24, r18
    1114:	b3 01       	movw	r22, r6
    1116:	0e 94 1e 0a 	call	0x143c	; 0x143c <__divmodhi4>
    111a:	89 2b       	or	r24, r25
    111c:	51 f4       	brne	.+20     	; 0x1132 <__stack+0x833>
    111e:	3f 93       	push	r19
    1120:	2f 93       	push	r18
    1122:	9f 92       	push	r9
    1124:	8f 92       	push	r8
    1126:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
					
					if (scope[i]){printf("1");}
    1132:	e0 91 8b 06 	lds	r30, 0x068B
    1136:	f0 91 8c 06 	lds	r31, 0x068C
    113a:	ea 0d       	add	r30, r10
    113c:	fb 1d       	adc	r31, r11
    113e:	80 81       	ld	r24, Z
    1140:	88 23       	and	r24, r24
    1142:	29 f0       	breq	.+10     	; 0x114e <__stack+0x84f>
    1144:	81 e3       	ldi	r24, 0x31	; 49
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <__stack+0x857>
					else {printf("0");}
    114e:	80 e3       	ldi	r24, 0x30	; 48
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
					}
				}
				break;
			case 'j':
				scope = debug_sensor_init(owChannel[active]);
				for (i=0; i<480; i++){
    1156:	20 91 8b 06 	lds	r18, 0x068B
    115a:	30 91 8c 06 	lds	r19, 0x068C
    115e:	2f 5f       	subi	r18, 0xFF	; 255
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	30 93 8c 06 	sts	0x068C, r19
    1166:	20 93 8b 06 	sts	0x068B, r18
    116a:	20 3e       	cpi	r18, 0xE0	; 224
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	38 07       	cpc	r19, r24
    1170:	84 f2       	brlt	.-96     	; 0x1112 <__stack+0x813>
					if (!(i % 100)){printf("\n%03u : ",i);}
					
					if (scope[i]){printf("1");}
					else {printf("0");}
				}
				printf("\n");
    1172:	8a e0       	ldi	r24, 0x0A	; 10
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
    117a:	ae cb       	rjmp	.-2212   	; 0x8d8 <main+0xf4>
			case 'n':
				printf("\n");
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				break;
    1184:	a9 cb       	rjmp	.-2222   	; 0x8d8 <main+0xf4>
			case 'p':
				printf("submit READ_POWER_SUPPLY (0x%02x) to channel %u\n",READ_POWER_SUPPLY,active);
    1186:	3f 92       	push	r3
    1188:	2f 92       	push	r2
    118a:	1f 92       	push	r1
    118c:	84 eb       	ldi	r24, 0xB4	; 180
    118e:	8f 93       	push	r24
    1190:	8e ec       	ldi	r24, 0xCE	; 206
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	97 cb       	rjmp	.-2258   	; 0x8d8 <main+0xf4>
			case 's':
				printf("%u: SKIP_ROM: 0x%02x\n",prog_cntr, SKIP_ROM);
    11aa:	1f 92       	push	r1
    11ac:	8c ec       	ldi	r24, 0xCC	; 204
    11ae:	8f 93       	push	r24
    11b0:	df 92       	push	r13
    11b2:	cf 92       	push	r12
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				transmit_data(SKIP_ROM,owChannel[active]);
    11c0:	f1 01       	movw	r30, r2
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	e4 0d       	add	r30, r4
    11c8:	f5 1d       	adc	r31, r5
    11ca:	65 89       	ldd	r22, Z+21	; 0x15
    11cc:	76 89       	ldd	r23, Z+22	; 0x16
    11ce:	8c ec       	ldi	r24, 0xCC	; 204
    11d0:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				break;
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	7b cb       	rjmp	.-2314   	; 0x8d8 <main+0xf4>
			case 't':
				printf("%u: READ_SCRATCHPAD: 0x%02x\n",prog_cntr,READ_SCRATCHPAD);
    11e2:	1f 92       	push	r1
    11e4:	8e eb       	ldi	r24, 0xBE	; 190
    11e6:	8f 93       	push	r24
    11e8:	df 92       	push	r13
    11ea:	cf 92       	push	r12
    11ec:	85 e1       	ldi	r24, 0x15	; 21
    11ee:	94 e0       	ldi	r25, 0x04	; 4
    11f0:	9f 93       	push	r25
    11f2:	8f 93       	push	r24
    11f4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
    11f8:	f1 01       	movw	r30, r2
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	e4 0d       	add	r30, r4
    1200:	f5 1d       	adc	r31, r5
    1202:	85 88       	ldd	r8, Z+21	; 0x15
    1204:	96 88       	ldd	r9, Z+22	; 0x16
    1206:	b4 01       	movw	r22, r8
    1208:	8e eb       	ldi	r24, 0xBE	; 190
    120a:	0e 94 44 02 	call	0x488	; 0x488 <transmit_data>
				printf("reading scratchpad: ");
    120e:	82 e3       	ldi	r24, 0x32	; 50
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	9f 93       	push	r25
    1214:	8f 93       	push	r24
    1216:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				for (i=0; i<9; i++){
    121a:	10 92 8c 06 	sts	0x068C, r1
    121e:	10 92 8b 06 	sts	0x068B, r1
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	a1 2c       	mov	r10, r1
    122e:	b1 2c       	mov	r11, r1
					sp[i] = read_data(owChannel[active]);
    1230:	c4 01       	movw	r24, r8
    1232:	0e 94 96 02 	call	0x52c	; 0x52c <read_data>
    1236:	ec e2       	ldi	r30, 0x2C	; 44
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	ec 0f       	add	r30, r28
    123c:	fd 1f       	adc	r31, r29
    123e:	ea 0d       	add	r30, r10
    1240:	fb 1d       	adc	r31, r11
    1242:	80 83       	st	Z, r24
				break;
			case 't':
				printf("%u: READ_SCRATCHPAD: 0x%02x\n",prog_cntr,READ_SCRATCHPAD);
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
				printf("reading scratchpad: ");
				for (i=0; i<9; i++){
    1244:	a0 90 8b 06 	lds	r10, 0x068B
    1248:	b0 90 8c 06 	lds	r11, 0x068C
    124c:	bf ef       	ldi	r27, 0xFF	; 255
    124e:	ab 1a       	sub	r10, r27
    1250:	bb 0a       	sbc	r11, r27
    1252:	b0 92 8c 06 	sts	0x068C, r11
    1256:	a0 92 8b 06 	sts	0x068B, r10
    125a:	e9 e0       	ldi	r30, 0x09	; 9
    125c:	ae 16       	cp	r10, r30
    125e:	b1 04       	cpc	r11, r1
    1260:	3c f3       	brlt	.-50     	; 0x1230 <__stack+0x931>
					sp[i] = read_data(owChannel[active]);
				}
				for (i=0; i<9; i++){
    1262:	10 92 8c 06 	sts	0x068C, r1
    1266:	10 92 8b 06 	sts	0x068B, r1
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
					printf("%02x",sp[i]);
    126e:	0f 2e       	mov	r0, r31
    1270:	ff ef       	ldi	r31, 0xFF	; 255
    1272:	af 2e       	mov	r10, r31
    1274:	f1 e0       	ldi	r31, 0x01	; 1
    1276:	bf 2e       	mov	r11, r31
    1278:	f0 2d       	mov	r31, r0
    127a:	ec e2       	ldi	r30, 0x2C	; 44
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ec 0f       	add	r30, r28
    1280:	fd 1f       	adc	r31, r29
    1282:	e8 0f       	add	r30, r24
    1284:	f9 1f       	adc	r31, r25
    1286:	80 81       	ld	r24, Z
    1288:	1f 92       	push	r1
    128a:	8f 93       	push	r24
    128c:	bf 92       	push	r11
    128e:	af 92       	push	r10
    1290:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				transmit_data(READ_SCRATCHPAD,owChannel[active]);
				printf("reading scratchpad: ");
				for (i=0; i<9; i++){
					sp[i] = read_data(owChannel[active]);
				}
				for (i=0; i<9; i++){
    1294:	80 91 8b 06 	lds	r24, 0x068B
    1298:	90 91 8c 06 	lds	r25, 0x068C
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	90 93 8c 06 	sts	0x068C, r25
    12a2:	80 93 8b 06 	sts	0x068B, r24
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	89 30       	cpi	r24, 0x09	; 9
    12b0:	91 05       	cpc	r25, r1
    12b2:	1c f3       	brlt	.-58     	; 0x127a <__stack+0x97b>
					printf("%02x",sp[i]);
				}
				printf("\n");
    12b4:	8a e0       	ldi	r24, 0x0A	; 10
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				printf("temperature: %2u.%3u C\n"
					,(uint16_t)((sp[1])<<8 | sp[0])>>4
					,(uint16_t)( 0x271 * (sp[0] & 0x0f) )
    12bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    12be:	98 2f       	mov	r25, r24
    12c0:	9f 70       	andi	r25, 0x0F	; 15
    12c2:	41 e7       	ldi	r20, 0x71	; 113
    12c4:	52 e0       	ldi	r21, 0x02	; 2
    12c6:	94 9f       	mul	r25, r20
    12c8:	90 01       	movw	r18, r0
    12ca:	95 9f       	mul	r25, r21
    12cc:	30 0d       	add	r19, r0
    12ce:	11 24       	eor	r1, r1
				}
				for (i=0; i<9; i++){
					printf("%02x",sp[i]);
				}
				printf("\n");
				printf("temperature: %2u.%3u C\n"
    12d0:	3f 93       	push	r19
    12d2:	2f 93       	push	r18
					,(uint16_t)((sp[1])<<8 | sp[0])>>4
    12d4:	2d a5       	ldd	r18, Y+45	; 0x2d
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	92 2b       	or	r25, r18
				}
				for (i=0; i<9; i++){
					printf("%02x",sp[i]);
				}
				printf("\n");
				printf("temperature: %2u.%3u C\n"
    12da:	92 95       	swap	r25
    12dc:	82 95       	swap	r24
    12de:	8f 70       	andi	r24, 0x0F	; 15
    12e0:	89 27       	eor	r24, r25
    12e2:	9f 70       	andi	r25, 0x0F	; 15
    12e4:	89 27       	eor	r24, r25
    12e6:	9f 93       	push	r25
    12e8:	8f 93       	push	r24
    12ea:	87 e4       	ldi	r24, 0x47	; 71
    12ec:	94 e0       	ldi	r25, 0x04	; 4
    12ee:	9f 93       	push	r25
    12f0:	8f 93       	push	r24
    12f2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
					,(uint16_t)((sp[1])<<8 | sp[0])>>4
					,(uint16_t)( 0x271 * (sp[0] & 0x0f) )
					);
				printf("Th: %3u C\n",sp[2]);
    12f6:	8e a5       	ldd	r24, Y+46	; 0x2e
    12f8:	1f 92       	push	r1
    12fa:	8f 93       	push	r24
    12fc:	8f e5       	ldi	r24, 0x5F	; 95
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	9f 93       	push	r25
    1302:	8f 93       	push	r24
    1304:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				printf("Tl: %3u C\n",sp[3]);
    1308:	8f a5       	ldd	r24, Y+47	; 0x2f
    130a:	1f 92       	push	r1
    130c:	8f 93       	push	r24
    130e:	8a e6       	ldi	r24, 0x6A	; 106
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	9f 93       	push	r25
    1314:	8f 93       	push	r24
    1316:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				printf("config : ");
    131a:	85 e7       	ldi	r24, 0x75	; 117
    131c:	94 e0       	ldi	r25, 0x04	; 4
    131e:	9f 93       	push	r25
    1320:	8f 93       	push	r24
    1322:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				for (i=0; i<8; i++){
    1326:	10 92 8c 06 	sts	0x068C, r1
    132a:	10 92 8b 06 	sts	0x068B, r1
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
					printf("%x",(sp[4]& 0x80)>>7);
    1338:	0f 2e       	mov	r0, r31
    133a:	f4 e0       	ldi	r31, 0x04	; 4
    133c:	af 2e       	mov	r10, r31
    133e:	f2 e0       	ldi	r31, 0x02	; 2
    1340:	bf 2e       	mov	r11, r31
    1342:	f0 2d       	mov	r31, r0
    1344:	88 a9       	ldd	r24, Y+48	; 0x30
    1346:	88 1f       	adc	r24, r24
    1348:	88 27       	eor	r24, r24
    134a:	88 1f       	adc	r24, r24
    134c:	1f 92       	push	r1
    134e:	8f 93       	push	r24
    1350:	bf 92       	push	r11
    1352:	af 92       	push	r10
    1354:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
					sp[4] = sp[4]<<1;
    1358:	88 a9       	ldd	r24, Y+48	; 0x30
    135a:	88 0f       	add	r24, r24
    135c:	88 ab       	std	Y+48, r24	; 0x30
					,(uint16_t)( 0x271 * (sp[0] & 0x0f) )
					);
				printf("Th: %3u C\n",sp[2]);
				printf("Tl: %3u C\n",sp[3]);
				printf("config : ");
				for (i=0; i<8; i++){
    135e:	80 91 8b 06 	lds	r24, 0x068B
    1362:	90 91 8c 06 	lds	r25, 0x068C
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	90 93 8c 06 	sts	0x068C, r25
    136c:	80 93 8b 06 	sts	0x068B, r24
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	08 97       	sbiw	r24, 0x08	; 8
    137a:	24 f3       	brlt	.-56     	; 0x1344 <__stack+0xa45>
					printf("%x",(sp[4]& 0x80)>>7);
					sp[4] = sp[4]<<1;
				}
				printf("\n");
    137c:	8a e0       	ldi	r24, 0x0A	; 10
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 88 0a 	call	0x1510	; 0x1510 <putchar>
				printf("ERC: 0x%02x\n",sp[8]);
    1384:	8c a9       	ldd	r24, Y+52	; 0x34
    1386:	1f 92       	push	r1
    1388:	8f 93       	push	r24
    138a:	8f e7       	ldi	r24, 0x7F	; 127
    138c:	94 e0       	ldi	r25, 0x04	; 4
    138e:	9f 93       	push	r25
    1390:	8f 93       	push	r24
    1392:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	9c ca       	rjmp	.-2760   	; 0x8d8 <main+0xf4>
			
			case 'x':
				active = (active+1) % 2;
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	23 1a       	sub	r2, r19
    13a4:	33 0a       	sbc	r3, r19
    13a6:	c1 01       	movw	r24, r2
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	90 78       	andi	r25, 0x80	; 128
    13ac:	99 23       	and	r25, r25
    13ae:	24 f4       	brge	.+8      	; 0x13b8 <__stack+0xab9>
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	8e 6f       	ori	r24, 0xFE	; 254
    13b4:	9f 6f       	ori	r25, 0xFF	; 255
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	1c 01       	movw	r2, r24
				printf("active channel is now %u\n",active+1);
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	9f 93       	push	r25
    13be:	8f 93       	push	r24
    13c0:	8c e8       	ldi	r24, 0x8C	; 140
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	9f 93       	push	r25
    13c6:	8f 93       	push	r24
    13c8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
				break;
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	81 ca       	rjmp	.-2814   	; 0x8d8 <main+0xf4>
	{
		
		if (first){key_press = 'h'; first = 0;}
		else {key_press = wait_for_key(1);}
			
		prog_cntr++;
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	c8 1a       	sub	r12, r24
    13da:	d8 0a       	sbc	r13, r24
    13dc:	90 ca       	rjmp	.-2784   	; 0x8fe <main+0x11a>

000013de <uart_putchar>:
	 	UBRR0L = MYUBRR;
	 	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	 	stdout = &mystdout; //Required for printf init
}
static int uart_putchar(char c, FILE *stream)
{
    13de:	cf 93       	push	r28
    13e0:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
    13e2:	8a 30       	cpi	r24, 0x0A	; 10
    13e4:	19 f4       	brne	.+6      	; 0x13ec <uart_putchar+0xe>
    13e6:	8d e0       	ldi	r24, 0x0D	; 13
    13e8:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
    13ec:	e0 ec       	ldi	r30, 0xC0	; 192
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	90 81       	ld	r25, Z
    13f2:	95 ff       	sbrs	r25, 5
    13f4:	fd cf       	rjmp	.-6      	; 0x13f0 <uart_putchar+0x12>
	UDR0 = c;
    13f6:	c0 93 c6 00 	sts	0x00C6, r28
	
	return 0;
}
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <uart_init>:
#define BAUD 9600
#define MYUBRR (FOSC/16/BAUD-1)

void uart_init(){
	 	//USART Baud rate: 9600
	 	UBRR0H = MYUBRR >> 8;
    1402:	10 92 c5 00 	sts	0x00C5, r1
	 	UBRR0L = MYUBRR;
    1406:	83 e3       	ldi	r24, 0x33	; 51
    1408:	80 93 c4 00 	sts	0x00C4, r24
	 	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    140c:	88 e1       	ldi	r24, 0x18	; 24
    140e:	80 93 c1 00 	sts	0x00C1, r24
	 	stdout = &mystdout; //Required for printf init
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	90 93 90 06 	sts	0x0690, r25
    141a:	80 93 8f 06 	sts	0x068F, r24
    141e:	08 95       	ret

00001420 <uart_getchar>:
	//    while( !(UCSR0A & (1<<RXC0)) );
	//    return(UDR0);

	// this here just checks if a key has been pressed
	// and returns it, otherwise 0
	if ( !(UCSR0A & (1<<RXC0)) ) {
    1420:	80 91 c0 00 	lds	r24, 0x00C0
    1424:	88 23       	and	r24, r24
    1426:	1c f4       	brge	.+6      	; 0x142e <uart_getchar+0xe>
	return(0);}
	else { return(UDR0);}
    1428:	80 91 c6 00 	lds	r24, 0x00C6
    142c:	08 95       	ret
	//    return(UDR0);

	// this here just checks if a key has been pressed
	// and returns it, otherwise 0
	if ( !(UCSR0A & (1<<RXC0)) ) {
	return(0);}
    142e:	80 e0       	ldi	r24, 0x00	; 0
	else { return(UDR0);}
}
    1430:	08 95       	ret

00001432 <wait_for_key>:
uint8_t wait_for_key(uint8_t silent)
{
	uint8_t key_press = 0;
	// iif (!silent) {printf("\nprint any key to continue >");}
	while (key_press == 0) {key_press = uart_getchar();};
    1432:	0e 94 10 0a 	call	0x1420	; 0x1420 <uart_getchar>
    1436:	88 23       	and	r24, r24
    1438:	e1 f3       	breq	.-8      	; 0x1432 <wait_for_key>
			printf("%c< key pressed, moving on\n", (char)key_press);
			break;
	}
	*/
	return (key_press);
    143a:	08 95       	ret

0000143c <__divmodhi4>:
    143c:	97 fb       	bst	r25, 7
    143e:	07 2e       	mov	r0, r23
    1440:	16 f4       	brtc	.+4      	; 0x1446 <__divmodhi4+0xa>
    1442:	00 94       	com	r0
    1444:	07 d0       	rcall	.+14     	; 0x1454 <__divmodhi4_neg1>
    1446:	77 fd       	sbrc	r23, 7
    1448:	09 d0       	rcall	.+18     	; 0x145c <__divmodhi4_neg2>
    144a:	0e 94 38 0a 	call	0x1470	; 0x1470 <__udivmodhi4>
    144e:	07 fc       	sbrc	r0, 7
    1450:	05 d0       	rcall	.+10     	; 0x145c <__divmodhi4_neg2>
    1452:	3e f4       	brtc	.+14     	; 0x1462 <__divmodhi4_exit>

00001454 <__divmodhi4_neg1>:
    1454:	90 95       	com	r25
    1456:	81 95       	neg	r24
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__divmodhi4_neg2>:
    145c:	70 95       	com	r23
    145e:	61 95       	neg	r22
    1460:	7f 4f       	sbci	r23, 0xFF	; 255

00001462 <__divmodhi4_exit>:
    1462:	08 95       	ret

00001464 <__tablejump2__>:
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	05 90       	lpm	r0, Z+
    146a:	f4 91       	lpm	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	09 94       	ijmp

00001470 <__udivmodhi4>:
    1470:	aa 1b       	sub	r26, r26
    1472:	bb 1b       	sub	r27, r27
    1474:	51 e1       	ldi	r21, 0x11	; 17
    1476:	07 c0       	rjmp	.+14     	; 0x1486 <__udivmodhi4_ep>

00001478 <__udivmodhi4_loop>:
    1478:	aa 1f       	adc	r26, r26
    147a:	bb 1f       	adc	r27, r27
    147c:	a6 17       	cp	r26, r22
    147e:	b7 07       	cpc	r27, r23
    1480:	10 f0       	brcs	.+4      	; 0x1486 <__udivmodhi4_ep>
    1482:	a6 1b       	sub	r26, r22
    1484:	b7 0b       	sbc	r27, r23

00001486 <__udivmodhi4_ep>:
    1486:	88 1f       	adc	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	5a 95       	dec	r21
    148c:	a9 f7       	brne	.-22     	; 0x1478 <__udivmodhi4_loop>
    148e:	80 95       	com	r24
    1490:	90 95       	com	r25
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	08 95       	ret

00001498 <printf>:
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e5       	ldi	r30, 0x52	; 82
    149e:	fa e0       	ldi	r31, 0x0A	; 10
    14a0:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__prologue_saves__+0x20>
    14a4:	ae 01       	movw	r20, r28
    14a6:	4b 5f       	subi	r20, 0xFB	; 251
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	fa 01       	movw	r30, r20
    14ac:	61 91       	ld	r22, Z+
    14ae:	71 91       	ld	r23, Z+
    14b0:	af 01       	movw	r20, r30
    14b2:	80 91 8f 06 	lds	r24, 0x068F
    14b6:	90 91 90 06 	lds	r25, 0x0690
    14ba:	0e 94 bf 0a 	call	0x157e	; 0x157e <vfprintf>
    14be:	e2 e0       	ldi	r30, 0x02	; 2
    14c0:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__epilogue_restores__+0x20>

000014c4 <printf_P>:
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 e6       	ldi	r30, 0x68	; 104
    14ca:	fa e0       	ldi	r31, 0x0A	; 10
    14cc:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__prologue_saves__+0x1c>
    14d0:	ae 01       	movw	r20, r28
    14d2:	49 5f       	subi	r20, 0xF9	; 249
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	da 01       	movw	r26, r20
    14d8:	6d 91       	ld	r22, X+
    14da:	7d 91       	ld	r23, X+
    14dc:	ad 01       	movw	r20, r26
    14de:	0d e8       	ldi	r16, 0x8D	; 141
    14e0:	16 e0       	ldi	r17, 0x06	; 6
    14e2:	f8 01       	movw	r30, r16
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	dc 01       	movw	r26, r24
    14ea:	13 96       	adiw	r26, 0x03	; 3
    14ec:	2c 91       	ld	r18, X
    14ee:	13 97       	sbiw	r26, 0x03	; 3
    14f0:	28 60       	ori	r18, 0x08	; 8
    14f2:	13 96       	adiw	r26, 0x03	; 3
    14f4:	2c 93       	st	X, r18
    14f6:	0e 94 bf 0a 	call	0x157e	; 0x157e <vfprintf>
    14fa:	d8 01       	movw	r26, r16
    14fc:	12 96       	adiw	r26, 0x02	; 2
    14fe:	ed 91       	ld	r30, X+
    1500:	fc 91       	ld	r31, X
    1502:	13 97       	sbiw	r26, 0x03	; 3
    1504:	23 81       	ldd	r18, Z+3	; 0x03
    1506:	27 7f       	andi	r18, 0xF7	; 247
    1508:	23 83       	std	Z+3, r18	; 0x03
    150a:	e4 e0       	ldi	r30, 0x04	; 4
    150c:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__epilogue_restores__+0x1c>

00001510 <putchar>:
    1510:	60 91 8f 06 	lds	r22, 0x068F
    1514:	70 91 90 06 	lds	r23, 0x0690
    1518:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    151c:	08 95       	ret

0000151e <puts>:
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	e0 91 8f 06 	lds	r30, 0x068F
    152a:	f0 91 90 06 	lds	r31, 0x0690
    152e:	23 81       	ldd	r18, Z+3	; 0x03
    1530:	21 ff       	sbrs	r18, 1
    1532:	1b c0       	rjmp	.+54     	; 0x156a <puts+0x4c>
    1534:	8c 01       	movw	r16, r24
    1536:	d0 e0       	ldi	r29, 0x00	; 0
    1538:	c0 e0       	ldi	r28, 0x00	; 0
    153a:	f8 01       	movw	r30, r16
    153c:	81 91       	ld	r24, Z+
    153e:	8f 01       	movw	r16, r30
    1540:	60 91 8f 06 	lds	r22, 0x068F
    1544:	70 91 90 06 	lds	r23, 0x0690
    1548:	db 01       	movw	r26, r22
    154a:	18 96       	adiw	r26, 0x08	; 8
    154c:	ed 91       	ld	r30, X+
    154e:	fc 91       	ld	r31, X
    1550:	19 97       	sbiw	r26, 0x09	; 9
    1552:	88 23       	and	r24, r24
    1554:	31 f0       	breq	.+12     	; 0x1562 <puts+0x44>
    1556:	09 95       	icall
    1558:	89 2b       	or	r24, r25
    155a:	79 f3       	breq	.-34     	; 0x153a <puts+0x1c>
    155c:	df ef       	ldi	r29, 0xFF	; 255
    155e:	cf ef       	ldi	r28, 0xFF	; 255
    1560:	ec cf       	rjmp	.-40     	; 0x153a <puts+0x1c>
    1562:	8a e0       	ldi	r24, 0x0A	; 10
    1564:	09 95       	icall
    1566:	89 2b       	or	r24, r25
    1568:	19 f0       	breq	.+6      	; 0x1570 <puts+0x52>
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f ef       	ldi	r25, 0xFF	; 255
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <puts+0x56>
    1570:	8d 2f       	mov	r24, r29
    1572:	9c 2f       	mov	r25, r28
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <vfprintf>:
    157e:	ac e0       	ldi	r26, 0x0C	; 12
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 ec       	ldi	r30, 0xC5	; 197
    1584:	fa e0       	ldi	r31, 0x0A	; 10
    1586:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__>
    158a:	7c 01       	movw	r14, r24
    158c:	6b 01       	movw	r12, r22
    158e:	8a 01       	movw	r16, r20
    1590:	fc 01       	movw	r30, r24
    1592:	17 82       	std	Z+7, r1	; 0x07
    1594:	16 82       	std	Z+6, r1	; 0x06
    1596:	83 81       	ldd	r24, Z+3	; 0x03
    1598:	81 ff       	sbrs	r24, 1
    159a:	bd c1       	rjmp	.+890    	; 0x1916 <vfprintf+0x398>
    159c:	ce 01       	movw	r24, r28
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	4c 01       	movw	r8, r24
    15a2:	f7 01       	movw	r30, r14
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	f6 01       	movw	r30, r12
    15a8:	93 fd       	sbrc	r25, 3
    15aa:	85 91       	lpm	r24, Z+
    15ac:	93 ff       	sbrs	r25, 3
    15ae:	81 91       	ld	r24, Z+
    15b0:	6f 01       	movw	r12, r30
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <vfprintf+0x3a>
    15b6:	ab c1       	rjmp	.+854    	; 0x190e <vfprintf+0x390>
    15b8:	85 32       	cpi	r24, 0x25	; 37
    15ba:	39 f4       	brne	.+14     	; 0x15ca <vfprintf+0x4c>
    15bc:	93 fd       	sbrc	r25, 3
    15be:	85 91       	lpm	r24, Z+
    15c0:	93 ff       	sbrs	r25, 3
    15c2:	81 91       	ld	r24, Z+
    15c4:	6f 01       	movw	r12, r30
    15c6:	85 32       	cpi	r24, 0x25	; 37
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <vfprintf+0x56>
    15ca:	b7 01       	movw	r22, r14
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    15d2:	e7 cf       	rjmp	.-50     	; 0x15a2 <vfprintf+0x24>
    15d4:	51 2c       	mov	r5, r1
    15d6:	31 2c       	mov	r3, r1
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	20 32       	cpi	r18, 0x20	; 32
    15dc:	a0 f4       	brcc	.+40     	; 0x1606 <vfprintf+0x88>
    15de:	8b 32       	cpi	r24, 0x2B	; 43
    15e0:	69 f0       	breq	.+26     	; 0x15fc <vfprintf+0x7e>
    15e2:	30 f4       	brcc	.+12     	; 0x15f0 <vfprintf+0x72>
    15e4:	80 32       	cpi	r24, 0x20	; 32
    15e6:	59 f0       	breq	.+22     	; 0x15fe <vfprintf+0x80>
    15e8:	83 32       	cpi	r24, 0x23	; 35
    15ea:	69 f4       	brne	.+26     	; 0x1606 <vfprintf+0x88>
    15ec:	20 61       	ori	r18, 0x10	; 16
    15ee:	2c c0       	rjmp	.+88     	; 0x1648 <vfprintf+0xca>
    15f0:	8d 32       	cpi	r24, 0x2D	; 45
    15f2:	39 f0       	breq	.+14     	; 0x1602 <vfprintf+0x84>
    15f4:	80 33       	cpi	r24, 0x30	; 48
    15f6:	39 f4       	brne	.+14     	; 0x1606 <vfprintf+0x88>
    15f8:	21 60       	ori	r18, 0x01	; 1
    15fa:	26 c0       	rjmp	.+76     	; 0x1648 <vfprintf+0xca>
    15fc:	22 60       	ori	r18, 0x02	; 2
    15fe:	24 60       	ori	r18, 0x04	; 4
    1600:	23 c0       	rjmp	.+70     	; 0x1648 <vfprintf+0xca>
    1602:	28 60       	ori	r18, 0x08	; 8
    1604:	21 c0       	rjmp	.+66     	; 0x1648 <vfprintf+0xca>
    1606:	27 fd       	sbrc	r18, 7
    1608:	27 c0       	rjmp	.+78     	; 0x1658 <vfprintf+0xda>
    160a:	30 ed       	ldi	r19, 0xD0	; 208
    160c:	38 0f       	add	r19, r24
    160e:	3a 30       	cpi	r19, 0x0A	; 10
    1610:	78 f4       	brcc	.+30     	; 0x1630 <vfprintf+0xb2>
    1612:	26 ff       	sbrs	r18, 6
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <vfprintf+0xa4>
    1616:	fa e0       	ldi	r31, 0x0A	; 10
    1618:	5f 9e       	mul	r5, r31
    161a:	30 0d       	add	r19, r0
    161c:	11 24       	eor	r1, r1
    161e:	53 2e       	mov	r5, r19
    1620:	13 c0       	rjmp	.+38     	; 0x1648 <vfprintf+0xca>
    1622:	8a e0       	ldi	r24, 0x0A	; 10
    1624:	38 9e       	mul	r3, r24
    1626:	30 0d       	add	r19, r0
    1628:	11 24       	eor	r1, r1
    162a:	33 2e       	mov	r3, r19
    162c:	20 62       	ori	r18, 0x20	; 32
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <vfprintf+0xca>
    1630:	8e 32       	cpi	r24, 0x2E	; 46
    1632:	21 f4       	brne	.+8      	; 0x163c <vfprintf+0xbe>
    1634:	26 fd       	sbrc	r18, 6
    1636:	6b c1       	rjmp	.+726    	; 0x190e <vfprintf+0x390>
    1638:	20 64       	ori	r18, 0x40	; 64
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <vfprintf+0xca>
    163c:	8c 36       	cpi	r24, 0x6C	; 108
    163e:	11 f4       	brne	.+4      	; 0x1644 <vfprintf+0xc6>
    1640:	20 68       	ori	r18, 0x80	; 128
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0xca>
    1644:	88 36       	cpi	r24, 0x68	; 104
    1646:	41 f4       	brne	.+16     	; 0x1658 <vfprintf+0xda>
    1648:	f6 01       	movw	r30, r12
    164a:	93 fd       	sbrc	r25, 3
    164c:	85 91       	lpm	r24, Z+
    164e:	93 ff       	sbrs	r25, 3
    1650:	81 91       	ld	r24, Z+
    1652:	6f 01       	movw	r12, r30
    1654:	81 11       	cpse	r24, r1
    1656:	c1 cf       	rjmp	.-126    	; 0x15da <vfprintf+0x5c>
    1658:	98 2f       	mov	r25, r24
    165a:	9f 7d       	andi	r25, 0xDF	; 223
    165c:	95 54       	subi	r25, 0x45	; 69
    165e:	93 30       	cpi	r25, 0x03	; 3
    1660:	28 f4       	brcc	.+10     	; 0x166c <vfprintf+0xee>
    1662:	0c 5f       	subi	r16, 0xFC	; 252
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	ff e3       	ldi	r31, 0x3F	; 63
    1668:	f9 83       	std	Y+1, r31	; 0x01
    166a:	0d c0       	rjmp	.+26     	; 0x1686 <vfprintf+0x108>
    166c:	83 36       	cpi	r24, 0x63	; 99
    166e:	31 f0       	breq	.+12     	; 0x167c <vfprintf+0xfe>
    1670:	83 37       	cpi	r24, 0x73	; 115
    1672:	71 f0       	breq	.+28     	; 0x1690 <vfprintf+0x112>
    1674:	83 35       	cpi	r24, 0x53	; 83
    1676:	09 f0       	breq	.+2      	; 0x167a <vfprintf+0xfc>
    1678:	5b c0       	rjmp	.+182    	; 0x1730 <vfprintf+0x1b2>
    167a:	22 c0       	rjmp	.+68     	; 0x16c0 <vfprintf+0x142>
    167c:	f8 01       	movw	r30, r16
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	44 24       	eor	r4, r4
    1688:	43 94       	inc	r4
    168a:	51 2c       	mov	r5, r1
    168c:	54 01       	movw	r10, r8
    168e:	15 c0       	rjmp	.+42     	; 0x16ba <vfprintf+0x13c>
    1690:	38 01       	movw	r6, r16
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	6f 0e       	add	r6, r31
    1696:	71 1c       	adc	r7, r1
    1698:	f8 01       	movw	r30, r16
    169a:	a0 80       	ld	r10, Z
    169c:	b1 80       	ldd	r11, Z+1	; 0x01
    169e:	26 ff       	sbrs	r18, 6
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x12a>
    16a2:	65 2d       	mov	r22, r5
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x12e>
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f ef       	ldi	r23, 0xFF	; 255
    16ac:	c5 01       	movw	r24, r10
    16ae:	2c 87       	std	Y+12, r18	; 0x0c
    16b0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <strnlen>
    16b4:	2c 01       	movw	r4, r24
    16b6:	83 01       	movw	r16, r6
    16b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ba:	2f 77       	andi	r18, 0x7F	; 127
    16bc:	22 2e       	mov	r2, r18
    16be:	17 c0       	rjmp	.+46     	; 0x16ee <vfprintf+0x170>
    16c0:	38 01       	movw	r6, r16
    16c2:	f2 e0       	ldi	r31, 0x02	; 2
    16c4:	6f 0e       	add	r6, r31
    16c6:	71 1c       	adc	r7, r1
    16c8:	f8 01       	movw	r30, r16
    16ca:	a0 80       	ld	r10, Z
    16cc:	b1 80       	ldd	r11, Z+1	; 0x01
    16ce:	26 ff       	sbrs	r18, 6
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <vfprintf+0x15a>
    16d2:	65 2d       	mov	r22, r5
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfprintf+0x15e>
    16d8:	6f ef       	ldi	r22, 0xFF	; 255
    16da:	7f ef       	ldi	r23, 0xFF	; 255
    16dc:	c5 01       	movw	r24, r10
    16de:	2c 87       	std	Y+12, r18	; 0x0c
    16e0:	0e 94 91 0c 	call	0x1922	; 0x1922 <strnlen_P>
    16e4:	2c 01       	movw	r4, r24
    16e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e8:	20 68       	ori	r18, 0x80	; 128
    16ea:	22 2e       	mov	r2, r18
    16ec:	83 01       	movw	r16, r6
    16ee:	23 fc       	sbrc	r2, 3
    16f0:	1b c0       	rjmp	.+54     	; 0x1728 <vfprintf+0x1aa>
    16f2:	83 2d       	mov	r24, r3
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	48 16       	cp	r4, r24
    16f8:	59 06       	cpc	r5, r25
    16fa:	b0 f4       	brcc	.+44     	; 0x1728 <vfprintf+0x1aa>
    16fc:	b7 01       	movw	r22, r14
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    1706:	3a 94       	dec	r3
    1708:	f4 cf       	rjmp	.-24     	; 0x16f2 <vfprintf+0x174>
    170a:	f5 01       	movw	r30, r10
    170c:	27 fc       	sbrc	r2, 7
    170e:	85 91       	lpm	r24, Z+
    1710:	27 fe       	sbrs	r2, 7
    1712:	81 91       	ld	r24, Z+
    1714:	5f 01       	movw	r10, r30
    1716:	b7 01       	movw	r22, r14
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    171e:	31 10       	cpse	r3, r1
    1720:	3a 94       	dec	r3
    1722:	f1 e0       	ldi	r31, 0x01	; 1
    1724:	4f 1a       	sub	r4, r31
    1726:	51 08       	sbc	r5, r1
    1728:	41 14       	cp	r4, r1
    172a:	51 04       	cpc	r5, r1
    172c:	71 f7       	brne	.-36     	; 0x170a <vfprintf+0x18c>
    172e:	e5 c0       	rjmp	.+458    	; 0x18fa <vfprintf+0x37c>
    1730:	84 36       	cpi	r24, 0x64	; 100
    1732:	11 f0       	breq	.+4      	; 0x1738 <vfprintf+0x1ba>
    1734:	89 36       	cpi	r24, 0x69	; 105
    1736:	39 f5       	brne	.+78     	; 0x1786 <vfprintf+0x208>
    1738:	f8 01       	movw	r30, r16
    173a:	27 ff       	sbrs	r18, 7
    173c:	07 c0       	rjmp	.+14     	; 0x174c <vfprintf+0x1ce>
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	0c 5f       	subi	r16, 0xFC	; 252
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	08 c0       	rjmp	.+16     	; 0x175c <vfprintf+0x1de>
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	07 2e       	mov	r0, r23
    1752:	00 0c       	add	r0, r0
    1754:	88 0b       	sbc	r24, r24
    1756:	99 0b       	sbc	r25, r25
    1758:	0e 5f       	subi	r16, 0xFE	; 254
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	2f 76       	andi	r18, 0x6F	; 111
    175e:	72 2e       	mov	r7, r18
    1760:	97 ff       	sbrs	r25, 7
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <vfprintf+0x1f8>
    1764:	90 95       	com	r25
    1766:	80 95       	com	r24
    1768:	70 95       	com	r23
    176a:	61 95       	neg	r22
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	8f 4f       	sbci	r24, 0xFF	; 255
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	20 68       	ori	r18, 0x80	; 128
    1774:	72 2e       	mov	r7, r18
    1776:	2a e0       	ldi	r18, 0x0A	; 10
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	a4 01       	movw	r20, r8
    177c:	0e 94 df 0c 	call	0x19be	; 0x19be <__ultoa_invert>
    1780:	a8 2e       	mov	r10, r24
    1782:	a8 18       	sub	r10, r8
    1784:	44 c0       	rjmp	.+136    	; 0x180e <vfprintf+0x290>
    1786:	85 37       	cpi	r24, 0x75	; 117
    1788:	29 f4       	brne	.+10     	; 0x1794 <vfprintf+0x216>
    178a:	2f 7e       	andi	r18, 0xEF	; 239
    178c:	b2 2e       	mov	r11, r18
    178e:	2a e0       	ldi	r18, 0x0A	; 10
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	25 c0       	rjmp	.+74     	; 0x17de <vfprintf+0x260>
    1794:	f2 2f       	mov	r31, r18
    1796:	f9 7f       	andi	r31, 0xF9	; 249
    1798:	bf 2e       	mov	r11, r31
    179a:	8f 36       	cpi	r24, 0x6F	; 111
    179c:	c1 f0       	breq	.+48     	; 0x17ce <vfprintf+0x250>
    179e:	18 f4       	brcc	.+6      	; 0x17a6 <vfprintf+0x228>
    17a0:	88 35       	cpi	r24, 0x58	; 88
    17a2:	79 f0       	breq	.+30     	; 0x17c2 <vfprintf+0x244>
    17a4:	b4 c0       	rjmp	.+360    	; 0x190e <vfprintf+0x390>
    17a6:	80 37       	cpi	r24, 0x70	; 112
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <vfprintf+0x232>
    17aa:	88 37       	cpi	r24, 0x78	; 120
    17ac:	21 f0       	breq	.+8      	; 0x17b6 <vfprintf+0x238>
    17ae:	af c0       	rjmp	.+350    	; 0x190e <vfprintf+0x390>
    17b0:	2f 2f       	mov	r18, r31
    17b2:	20 61       	ori	r18, 0x10	; 16
    17b4:	b2 2e       	mov	r11, r18
    17b6:	b4 fe       	sbrs	r11, 4
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <vfprintf+0x256>
    17ba:	8b 2d       	mov	r24, r11
    17bc:	84 60       	ori	r24, 0x04	; 4
    17be:	b8 2e       	mov	r11, r24
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <vfprintf+0x256>
    17c2:	24 ff       	sbrs	r18, 4
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <vfprintf+0x25c>
    17c6:	9f 2f       	mov	r25, r31
    17c8:	96 60       	ori	r25, 0x06	; 6
    17ca:	b9 2e       	mov	r11, r25
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0x25c>
    17ce:	28 e0       	ldi	r18, 0x08	; 8
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <vfprintf+0x260>
    17d4:	20 e1       	ldi	r18, 0x10	; 16
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x260>
    17da:	20 e1       	ldi	r18, 0x10	; 16
    17dc:	32 e0       	ldi	r19, 0x02	; 2
    17de:	f8 01       	movw	r30, r16
    17e0:	b7 fe       	sbrs	r11, 7
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <vfprintf+0x274>
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	0c 5f       	subi	r16, 0xFC	; 252
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x280>
    17f2:	60 81       	ld	r22, Z
    17f4:	71 81       	ldd	r23, Z+1	; 0x01
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 5f       	subi	r16, 0xFE	; 254
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	a4 01       	movw	r20, r8
    1800:	0e 94 df 0c 	call	0x19be	; 0x19be <__ultoa_invert>
    1804:	a8 2e       	mov	r10, r24
    1806:	a8 18       	sub	r10, r8
    1808:	fb 2d       	mov	r31, r11
    180a:	ff 77       	andi	r31, 0x7F	; 127
    180c:	7f 2e       	mov	r7, r31
    180e:	76 fe       	sbrs	r7, 6
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <vfprintf+0x2aa>
    1812:	37 2d       	mov	r19, r7
    1814:	3e 7f       	andi	r19, 0xFE	; 254
    1816:	a5 14       	cp	r10, r5
    1818:	50 f4       	brcc	.+20     	; 0x182e <vfprintf+0x2b0>
    181a:	74 fe       	sbrs	r7, 4
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <vfprintf+0x2b4>
    181e:	72 fc       	sbrc	r7, 2
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <vfprintf+0x2b4>
    1822:	37 2d       	mov	r19, r7
    1824:	3e 7e       	andi	r19, 0xEE	; 238
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <vfprintf+0x2b4>
    1828:	ba 2c       	mov	r11, r10
    182a:	37 2d       	mov	r19, r7
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <vfprintf+0x2b6>
    182e:	ba 2c       	mov	r11, r10
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <vfprintf+0x2b6>
    1832:	b5 2c       	mov	r11, r5
    1834:	34 ff       	sbrs	r19, 4
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <vfprintf+0x2d4>
    1838:	fe 01       	movw	r30, r28
    183a:	ea 0d       	add	r30, r10
    183c:	f1 1d       	adc	r31, r1
    183e:	80 81       	ld	r24, Z
    1840:	80 33       	cpi	r24, 0x30	; 48
    1842:	11 f4       	brne	.+4      	; 0x1848 <vfprintf+0x2ca>
    1844:	39 7e       	andi	r19, 0xE9	; 233
    1846:	09 c0       	rjmp	.+18     	; 0x185a <vfprintf+0x2dc>
    1848:	32 ff       	sbrs	r19, 2
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <vfprintf+0x2da>
    184c:	b3 94       	inc	r11
    184e:	b3 94       	inc	r11
    1850:	04 c0       	rjmp	.+8      	; 0x185a <vfprintf+0x2dc>
    1852:	83 2f       	mov	r24, r19
    1854:	86 78       	andi	r24, 0x86	; 134
    1856:	09 f0       	breq	.+2      	; 0x185a <vfprintf+0x2dc>
    1858:	b3 94       	inc	r11
    185a:	33 fd       	sbrc	r19, 3
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <vfprintf+0x306>
    185e:	30 ff       	sbrs	r19, 0
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x2f0>
    1862:	5a 2c       	mov	r5, r10
    1864:	b3 14       	cp	r11, r3
    1866:	18 f4       	brcc	.+6      	; 0x186e <vfprintf+0x2f0>
    1868:	53 0c       	add	r5, r3
    186a:	5b 18       	sub	r5, r11
    186c:	b3 2c       	mov	r11, r3
    186e:	b3 14       	cp	r11, r3
    1870:	68 f4       	brcc	.+26     	; 0x188c <vfprintf+0x30e>
    1872:	b7 01       	movw	r22, r14
    1874:	80 e2       	ldi	r24, 0x20	; 32
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	3c 87       	std	Y+12, r19	; 0x0c
    187a:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    187e:	b3 94       	inc	r11
    1880:	3c 85       	ldd	r19, Y+12	; 0x0c
    1882:	f5 cf       	rjmp	.-22     	; 0x186e <vfprintf+0x2f0>
    1884:	b3 14       	cp	r11, r3
    1886:	10 f4       	brcc	.+4      	; 0x188c <vfprintf+0x30e>
    1888:	3b 18       	sub	r3, r11
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vfprintf+0x310>
    188c:	31 2c       	mov	r3, r1
    188e:	34 ff       	sbrs	r19, 4
    1890:	12 c0       	rjmp	.+36     	; 0x18b6 <vfprintf+0x338>
    1892:	b7 01       	movw	r22, r14
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	3c 87       	std	Y+12, r19	; 0x0c
    189a:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    189e:	3c 85       	ldd	r19, Y+12	; 0x0c
    18a0:	32 ff       	sbrs	r19, 2
    18a2:	17 c0       	rjmp	.+46     	; 0x18d2 <vfprintf+0x354>
    18a4:	31 fd       	sbrc	r19, 1
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <vfprintf+0x330>
    18a8:	88 e7       	ldi	r24, 0x78	; 120
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <vfprintf+0x334>
    18ae:	88 e5       	ldi	r24, 0x58	; 88
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	b7 01       	movw	r22, r14
    18b4:	0c c0       	rjmp	.+24     	; 0x18ce <vfprintf+0x350>
    18b6:	83 2f       	mov	r24, r19
    18b8:	86 78       	andi	r24, 0x86	; 134
    18ba:	59 f0       	breq	.+22     	; 0x18d2 <vfprintf+0x354>
    18bc:	31 ff       	sbrs	r19, 1
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <vfprintf+0x346>
    18c0:	8b e2       	ldi	r24, 0x2B	; 43
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <vfprintf+0x348>
    18c4:	80 e2       	ldi	r24, 0x20	; 32
    18c6:	37 fd       	sbrc	r19, 7
    18c8:	8d e2       	ldi	r24, 0x2D	; 45
    18ca:	b7 01       	movw	r22, r14
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    18d2:	a5 14       	cp	r10, r5
    18d4:	38 f4       	brcc	.+14     	; 0x18e4 <vfprintf+0x366>
    18d6:	b7 01       	movw	r22, r14
    18d8:	80 e3       	ldi	r24, 0x30	; 48
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    18e0:	5a 94       	dec	r5
    18e2:	f7 cf       	rjmp	.-18     	; 0x18d2 <vfprintf+0x354>
    18e4:	aa 94       	dec	r10
    18e6:	f4 01       	movw	r30, r8
    18e8:	ea 0d       	add	r30, r10
    18ea:	f1 1d       	adc	r31, r1
    18ec:	80 81       	ld	r24, Z
    18ee:	b7 01       	movw	r22, r14
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    18f6:	a1 10       	cpse	r10, r1
    18f8:	f5 cf       	rjmp	.-22     	; 0x18e4 <vfprintf+0x366>
    18fa:	33 20       	and	r3, r3
    18fc:	09 f4       	brne	.+2      	; 0x1900 <vfprintf+0x382>
    18fe:	51 ce       	rjmp	.-862    	; 0x15a2 <vfprintf+0x24>
    1900:	b7 01       	movw	r22, r14
    1902:	80 e2       	ldi	r24, 0x20	; 32
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 a7 0c 	call	0x194e	; 0x194e <fputc>
    190a:	3a 94       	dec	r3
    190c:	f6 cf       	rjmp	.-20     	; 0x18fa <vfprintf+0x37c>
    190e:	f7 01       	movw	r30, r14
    1910:	86 81       	ldd	r24, Z+6	; 0x06
    1912:	97 81       	ldd	r25, Z+7	; 0x07
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x39c>
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	9f ef       	ldi	r25, 0xFF	; 255
    191a:	2c 96       	adiw	r28, 0x0c	; 12
    191c:	e2 e1       	ldi	r30, 0x12	; 18
    191e:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__>

00001922 <strnlen_P>:
    1922:	fc 01       	movw	r30, r24
    1924:	05 90       	lpm	r0, Z+
    1926:	61 50       	subi	r22, 0x01	; 1
    1928:	70 40       	sbci	r23, 0x00	; 0
    192a:	01 10       	cpse	r0, r1
    192c:	d8 f7       	brcc	.-10     	; 0x1924 <strnlen_P+0x2>
    192e:	80 95       	com	r24
    1930:	90 95       	com	r25
    1932:	8e 0f       	add	r24, r30
    1934:	9f 1f       	adc	r25, r31
    1936:	08 95       	ret

00001938 <strnlen>:
    1938:	fc 01       	movw	r30, r24
    193a:	61 50       	subi	r22, 0x01	; 1
    193c:	70 40       	sbci	r23, 0x00	; 0
    193e:	01 90       	ld	r0, Z+
    1940:	01 10       	cpse	r0, r1
    1942:	d8 f7       	brcc	.-10     	; 0x193a <strnlen+0x2>
    1944:	80 95       	com	r24
    1946:	90 95       	com	r25
    1948:	8e 0f       	add	r24, r30
    194a:	9f 1f       	adc	r25, r31
    194c:	08 95       	ret

0000194e <fputc>:
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	fb 01       	movw	r30, r22
    1958:	23 81       	ldd	r18, Z+3	; 0x03
    195a:	21 fd       	sbrc	r18, 1
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <fputc+0x16>
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	28 c0       	rjmp	.+80     	; 0x19b4 <fputc+0x66>
    1964:	22 ff       	sbrs	r18, 2
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <fputc+0x46>
    1968:	46 81       	ldd	r20, Z+6	; 0x06
    196a:	57 81       	ldd	r21, Z+7	; 0x07
    196c:	24 81       	ldd	r18, Z+4	; 0x04
    196e:	35 81       	ldd	r19, Z+5	; 0x05
    1970:	42 17       	cp	r20, r18
    1972:	53 07       	cpc	r21, r19
    1974:	44 f4       	brge	.+16     	; 0x1986 <fputc+0x38>
    1976:	a0 81       	ld	r26, Z
    1978:	b1 81       	ldd	r27, Z+1	; 0x01
    197a:	9d 01       	movw	r18, r26
    197c:	2f 5f       	subi	r18, 0xFF	; 255
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	31 83       	std	Z+1, r19	; 0x01
    1982:	20 83       	st	Z, r18
    1984:	8c 93       	st	X, r24
    1986:	26 81       	ldd	r18, Z+6	; 0x06
    1988:	37 81       	ldd	r19, Z+7	; 0x07
    198a:	2f 5f       	subi	r18, 0xFF	; 255
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
    198e:	37 83       	std	Z+7, r19	; 0x07
    1990:	26 83       	std	Z+6, r18	; 0x06
    1992:	10 c0       	rjmp	.+32     	; 0x19b4 <fputc+0x66>
    1994:	eb 01       	movw	r28, r22
    1996:	09 2f       	mov	r16, r25
    1998:	18 2f       	mov	r17, r24
    199a:	00 84       	ldd	r0, Z+8	; 0x08
    199c:	f1 85       	ldd	r31, Z+9	; 0x09
    199e:	e0 2d       	mov	r30, r0
    19a0:	09 95       	icall
    19a2:	89 2b       	or	r24, r25
    19a4:	e1 f6       	brne	.-72     	; 0x195e <fputc+0x10>
    19a6:	8e 81       	ldd	r24, Y+6	; 0x06
    19a8:	9f 81       	ldd	r25, Y+7	; 0x07
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	9f 83       	std	Y+7, r25	; 0x07
    19ae:	8e 83       	std	Y+6, r24	; 0x06
    19b0:	81 2f       	mov	r24, r17
    19b2:	90 2f       	mov	r25, r16
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	08 95       	ret

000019be <__ultoa_invert>:
    19be:	fa 01       	movw	r30, r20
    19c0:	aa 27       	eor	r26, r26
    19c2:	28 30       	cpi	r18, 0x08	; 8
    19c4:	51 f1       	breq	.+84     	; 0x1a1a <__ultoa_invert+0x5c>
    19c6:	20 31       	cpi	r18, 0x10	; 16
    19c8:	81 f1       	breq	.+96     	; 0x1a2a <__ultoa_invert+0x6c>
    19ca:	e8 94       	clt
    19cc:	6f 93       	push	r22
    19ce:	6e 7f       	andi	r22, 0xFE	; 254
    19d0:	6e 5f       	subi	r22, 0xFE	; 254
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	8f 4f       	sbci	r24, 0xFF	; 255
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	af 4f       	sbci	r26, 0xFF	; 255
    19da:	b1 e0       	ldi	r27, 0x01	; 1
    19dc:	3e d0       	rcall	.+124    	; 0x1a5a <__ultoa_invert+0x9c>
    19de:	b4 e0       	ldi	r27, 0x04	; 4
    19e0:	3c d0       	rcall	.+120    	; 0x1a5a <__ultoa_invert+0x9c>
    19e2:	67 0f       	add	r22, r23
    19e4:	78 1f       	adc	r23, r24
    19e6:	89 1f       	adc	r24, r25
    19e8:	9a 1f       	adc	r25, r26
    19ea:	a1 1d       	adc	r26, r1
    19ec:	68 0f       	add	r22, r24
    19ee:	79 1f       	adc	r23, r25
    19f0:	8a 1f       	adc	r24, r26
    19f2:	91 1d       	adc	r25, r1
    19f4:	a1 1d       	adc	r26, r1
    19f6:	6a 0f       	add	r22, r26
    19f8:	71 1d       	adc	r23, r1
    19fa:	81 1d       	adc	r24, r1
    19fc:	91 1d       	adc	r25, r1
    19fe:	a1 1d       	adc	r26, r1
    1a00:	20 d0       	rcall	.+64     	; 0x1a42 <__ultoa_invert+0x84>
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__ultoa_invert+0x48>
    1a04:	68 94       	set
    1a06:	3f 91       	pop	r19
    1a08:	2a e0       	ldi	r18, 0x0A	; 10
    1a0a:	26 9f       	mul	r18, r22
    1a0c:	11 24       	eor	r1, r1
    1a0e:	30 19       	sub	r19, r0
    1a10:	30 5d       	subi	r19, 0xD0	; 208
    1a12:	31 93       	st	Z+, r19
    1a14:	de f6       	brtc	.-74     	; 0x19cc <__ultoa_invert+0xe>
    1a16:	cf 01       	movw	r24, r30
    1a18:	08 95       	ret
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	47 70       	andi	r20, 0x07	; 7
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	41 93       	st	Z+, r20
    1a22:	b3 e0       	ldi	r27, 0x03	; 3
    1a24:	0f d0       	rcall	.+30     	; 0x1a44 <__ultoa_invert+0x86>
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__ultoa_invert+0x5c>
    1a28:	f6 cf       	rjmp	.-20     	; 0x1a16 <__ultoa_invert+0x58>
    1a2a:	46 2f       	mov	r20, r22
    1a2c:	4f 70       	andi	r20, 0x0F	; 15
    1a2e:	40 5d       	subi	r20, 0xD0	; 208
    1a30:	4a 33       	cpi	r20, 0x3A	; 58
    1a32:	18 f0       	brcs	.+6      	; 0x1a3a <__ultoa_invert+0x7c>
    1a34:	49 5d       	subi	r20, 0xD9	; 217
    1a36:	31 fd       	sbrc	r19, 1
    1a38:	40 52       	subi	r20, 0x20	; 32
    1a3a:	41 93       	st	Z+, r20
    1a3c:	02 d0       	rcall	.+4      	; 0x1a42 <__ultoa_invert+0x84>
    1a3e:	a9 f7       	brne	.-22     	; 0x1a2a <__ultoa_invert+0x6c>
    1a40:	ea cf       	rjmp	.-44     	; 0x1a16 <__ultoa_invert+0x58>
    1a42:	b4 e0       	ldi	r27, 0x04	; 4
    1a44:	a6 95       	lsr	r26
    1a46:	97 95       	ror	r25
    1a48:	87 95       	ror	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	ba 95       	dec	r27
    1a50:	c9 f7       	brne	.-14     	; 0x1a44 <__ultoa_invert+0x86>
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 05       	cpc	r22, r1
    1a56:	71 05       	cpc	r23, r1
    1a58:	08 95       	ret
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	0a 2e       	mov	r0, r26
    1a60:	06 94       	lsr	r0
    1a62:	57 95       	ror	r21
    1a64:	47 95       	ror	r20
    1a66:	37 95       	ror	r19
    1a68:	27 95       	ror	r18
    1a6a:	ba 95       	dec	r27
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <__ultoa_invert+0xa2>
    1a6e:	62 0f       	add	r22, r18
    1a70:	73 1f       	adc	r23, r19
    1a72:	84 1f       	adc	r24, r20
    1a74:	95 1f       	adc	r25, r21
    1a76:	a0 1d       	adc	r26, r0
    1a78:	08 95       	ret

00001a7a <__prologue_saves__>:
    1a7a:	2f 92       	push	r2
    1a7c:	3f 92       	push	r3
    1a7e:	4f 92       	push	r4
    1a80:	5f 92       	push	r5
    1a82:	6f 92       	push	r6
    1a84:	7f 92       	push	r7
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ca 1b       	sub	r28, r26
    1aa4:	db 0b       	sbc	r29, r27
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	09 94       	ijmp

00001ab2 <__epilogue_restores__>:
    1ab2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab4:	39 88       	ldd	r3, Y+17	; 0x11
    1ab6:	48 88       	ldd	r4, Y+16	; 0x10
    1ab8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aba:	6e 84       	ldd	r6, Y+14	; 0x0e
    1abc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1abe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ac6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac8:	df 80       	ldd	r13, Y+7	; 0x07
    1aca:	ee 80       	ldd	r14, Y+6	; 0x06
    1acc:	fd 80       	ldd	r15, Y+5	; 0x05
    1ace:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad6:	ce 0f       	add	r28, r30
    1ad8:	d1 1d       	adc	r29, r1
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	ed 01       	movw	r28, r26
    1ae6:	08 95       	ret

00001ae8 <_exit>:
    1ae8:	f8 94       	cli

00001aea <__stop_program>:
    1aea:	ff cf       	rjmp	.-2      	; 0x1aea <__stop_program>
