
RGB_LED_wave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000288  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000037f  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c3  00000000  00000000  0000064f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f4  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b2  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 77 00 	call	0xee	; 0xee <main>
  78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <output_grb>:
.equ	SREG, 0x3f


.global output_grb
output_grb:
         movw   r26, r24      ;r26:27 = X = p_buf
  80:	dc 01       	movw	r26, r24
         movw   r24, r22      ;r24:25 = count
  82:	cb 01       	movw	r24, r22
         in     r22, SREG     ;save SREG (global int state)
  84:	6f b7       	in	r22, 0x3f	; 63
         cli                  ;no interrupts from here on, we're cycle-counting
  86:	f8 94       	cli
         in     r20, PORTB
  88:	45 b1       	in	r20, 0x05	; 5
         ori    r20, (1<<OUTBIT)         ;our '1' output
  8a:	42 60       	ori	r20, 0x02	; 2
         in     r21, PORTB
  8c:	55 b1       	in	r21, 0x05	; 5
         andi   r21, ~(1<<OUTBIT)        ;our '0' output
  8e:	5d 7f       	andi	r21, 0xFD	; 253
         ldi    r19, 7        ;7 bit counter (8th bit is different)
  90:	37 e0       	ldi	r19, 0x07	; 7
         ld     r18,X+        ;get first data byte
  92:	2d 91       	ld	r18, X+

00000094 <loop1>:
loop1:
         out    PORTB, r20    ; 1   +0 start of a bit pulse
  94:	45 b9       	out	0x05, r20	; 5
         lsl    r18           ; 1   +1 next bit into C, MSB first
  96:	22 0f       	add	r18, r18
         brcs   L1            ; 1/2 +2 branch if 1
  98:	30 f0       	brcs	.+12     	; 0xa6 <L1>
         out    PORTB, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  9a:	55 b9       	out	0x05, r21	; 5
         nop                  ; 1   +4
  9c:	00 00       	nop
         bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  9e:	27 fb       	bst	r18, 7
         subi   r19, 1        ; 1   +6 how many more bits for this byte?
  a0:	31 50       	subi	r19, 0x01	; 1
         breq   bit8          ; 1/2 +7 last bit, do differently
  a2:	31 f0       	breq	.+12     	; 0xb0 <bit8>
         rjmp   loop1         ; 2   +8, 10 total for 0 bit
  a4:	f7 cf       	rjmp	.-18     	; 0x94 <loop1>

000000a6 <L1>:
L1:
         nop                  ; 1   +4
  a6:	00 00       	nop
         bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  a8:	27 fb       	bst	r18, 7
         subi   r19, 1        ; 1   +6 how many more bits for this byte
  aa:	31 50       	subi	r19, 0x01	; 1
         out    PORTB, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
  ac:	55 b9       	out	0x05, r21	; 5
         brne   loop1         ; 2/1 +8 10 total for 1 bit (fall thru if last bit)
  ae:	91 f7       	brne	.-28     	; 0x94 <loop1>

000000b0 <bit8>:
bit8:
         ldi    r19, 7        ; 1   +9 bit count for next byte
  b0:	37 e0       	ldi	r19, 0x07	; 7
         out    PORTB, r20    ; 1   +0 start of a bit pulse
  b2:	45 b9       	out	0x05, r20	; 5
         brts   L2            ; 1/2 +1 branch if last bit is a 1
  b4:	3e f0       	brts	.+14     	; 0xc4 <L2>
         nop                  ; 1   +2
  b6:	00 00       	nop
         out    PORTB, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  b8:	55 b9       	out	0x05, r21	; 5
         ld     r18, X+       ; 2   +4 fetch next byte
  ba:	2d 91       	ld	r18, X+
         sbiw   r24, 1        ; 2   +6 dec byte counter
  bc:	01 97       	sbiw	r24, 0x01	; 1
         brne   loop1         ; 2   +8 loop back or return
  be:	51 f7       	brne	.-44     	; 0x94 <loop1>
         out    SREG, r22     ; restore global int flag
  c0:	6f bf       	out	0x3f, r22	; 63
         ret
  c2:	08 95       	ret

000000c4 <L2>:
L2:
         ld     r18, X+       ; 2   +3 fetch next byte
  c4:	2d 91       	ld	r18, X+
         sbiw   r24, 1        ; 2   +5 dec byte counter
  c6:	01 97       	sbiw	r24, 0x01	; 1
         out     PORTB, r21   ; 1   +7 end hi for '1' bit (7 clocks hi)
  c8:	55 b9       	out	0x05, r21	; 5
         brne   loop1         ; 2   +8 loop back or return
  ca:	21 f7       	brne	.-56     	; 0x94 <loop1>
         out    SREG, r22     ; restore global int flag
  cc:	6f bf       	out	0x3f, r22	; 63
         ret
  ce:	08 95       	ret

000000d0 <set_color>:

// declaration of our ASM function
extern void output_grb(u8 * ptr, u16 count);

void set_color(u8 * p_buf, u8 led, u8 r, u8 g, u8 b)
{
  d0:	0f 93       	push	r16
	u16 index = 3*led;
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	fb 01       	movw	r30, r22
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	6e 0f       	add	r22, r30
  dc:	7f 1f       	adc	r23, r31
	p_buf[index++] = g;
  de:	fc 01       	movw	r30, r24
  e0:	e6 0f       	add	r30, r22
  e2:	f7 1f       	adc	r31, r23
  e4:	20 83       	st	Z, r18
	p_buf[index++] = r;
  e6:	41 83       	std	Z+1, r20	; 0x01
	p_buf[index] = b;
  e8:	02 83       	std	Z+2, r16	; 0x02
}
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <main>:
/**/
int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	c2 5a       	subi	r28, 0xA2	; 162
  f8:	d1 09       	sbc	r29, r1
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 1<<0;
 104:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= 1<<1;
 106:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1<<2;
 108:	22 9a       	sbi	0x04, 2	; 4

	u8 buf[NUM_LEDS];
//	int count = 0;
	
	memset(buf, 0, sizeof(buf));
 10a:	fe 01       	movw	r30, r28
 10c:	31 96       	adiw	r30, 0x01	; 1
 10e:	82 ea       	ldi	r24, 0xA2	; 162
 110:	df 01       	movw	r26, r30
 112:	1d 92       	st	X+, r1
 114:	8a 95       	dec	r24
 116:	e9 f7       	brne	.-6      	; 0x112 <main+0x24>
		} else {
			PORTB |= (1<<1);
		}
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
 118:	91 2c       	mov	r9, r1
	p_buf[index++] = r;
	p_buf[index] = b;
}
/**/
int main(void)
{
 11a:	a9 2c       	mov	r10, r9
 11c:	b9 2c       	mov	r11, r9
 11e:	f9 2c       	mov	r15, r9
		} else {
			PORTB |= (1<<1);
		}
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
 120:	c9 2c       	mov	r12, r9
 122:	4c c0       	rjmp	.+152    	; 0x1bc <main+0xce>
			for (g = 0; g<RANGE; g += STEP){
				for (b = 0; b<RANGE; b += STEP){
					for (pos = 0; pos<NUM_WS2812; pos++){
			
						set_color(buf, pos, r, g, b);
 124:	0e 2d       	mov	r16, r14
 126:	2d 2d       	mov	r18, r13
 128:	4c 2d       	mov	r20, r12
 12a:	61 2f       	mov	r22, r17
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 68 00 	call	0xd0	; 0xd0 <set_color>
						if (pos==0){set_color(buf, NUM_WS2812 - 1 , 0, 0, 0);}
 134:	11 11       	cpse	r17, r1
 136:	16 c0       	rjmp	.+44     	; 0x164 <main+0x76>
 138:	0f 2d       	mov	r16, r15
 13a:	2f 2d       	mov	r18, r15
 13c:	4f 2d       	mov	r20, r15
 13e:	65 e3       	ldi	r22, 0x35	; 53
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 68 00 	call	0xd0	; 0xd0 <set_color>
						else {set_color(buf, pos -1, 0, 0, 0);}
				
						output_grb(buf, sizeof(buf));
 148:	62 ea       	ldi	r22, 0xA2	; 162
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	0e 94 40 00 	call	0x80	; 0x80 <output_grb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e1       	ldi	r24, 0x1F	; 31
 156:	9e e4       	ldi	r25, 0x4E	; 78
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x6a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x70>
 15e:	00 00       	nop
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
			for (g = 0; g<RANGE; g += STEP){
				for (b = 0; b<RANGE; b += STEP){
					for (pos = 0; pos<NUM_WS2812; pos++){
 160:	1f 5f       	subi	r17, 0xFF	; 255
 162:	e0 cf       	rjmp	.-64     	; 0x124 <main+0x36>
 164:	6f ef       	ldi	r22, 0xFF	; 255
 166:	61 0f       	add	r22, r17
			
						set_color(buf, pos, r, g, b);
						if (pos==0){set_color(buf, NUM_WS2812 - 1 , 0, 0, 0);}
						else {set_color(buf, pos -1, 0, 0, 0);}
 168:	0f 2d       	mov	r16, r15
 16a:	2f 2d       	mov	r18, r15
 16c:	4f 2d       	mov	r20, r15
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	0e 94 68 00 	call	0xd0	; 0xd0 <set_color>
				
						output_grb(buf, sizeof(buf));
 176:	62 ea       	ldi	r22, 0xA2	; 162
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 40 00 	call	0x80	; 0x80 <output_grb>
 182:	af e1       	ldi	r26, 0x1F	; 31
 184:	be e4       	ldi	r27, 0x4E	; 78
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x98>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x9e>
 18c:	00 00       	nop
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
			for (g = 0; g<RANGE; g += STEP){
				for (b = 0; b<RANGE; b += STEP){
					for (pos = 0; pos<NUM_WS2812; pos++){
 18e:	1f 5f       	subi	r17, 0xFF	; 255
 190:	16 33       	cpi	r17, 0x36	; 54
 192:	41 f6       	brne	.-112    	; 0x124 <main+0x36>
		}
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
			for (g = 0; g<RANGE; g += STEP){
				for (b = 0; b<RANGE; b += STEP){
 194:	b9 e1       	ldi	r27, 0x19	; 25
 196:	eb 0e       	add	r14, r27
 198:	8b e4       	ldi	r24, 0x4B	; 75
 19a:	e8 16       	cp	r14, r24
 19c:	11 f0       	breq	.+4      	; 0x1a2 <main+0xb4>
	p_buf[index++] = r;
	p_buf[index] = b;
}
/**/
int main(void)
{
 19e:	1f 2d       	mov	r17, r15
 1a0:	c1 cf       	rjmp	.-126    	; 0x124 <main+0x36>
			PORTB |= (1<<1);
		}
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
			for (g = 0; g<RANGE; g += STEP){
 1a2:	99 e1       	ldi	r25, 0x19	; 25
 1a4:	d9 0e       	add	r13, r25
 1a6:	ab e4       	ldi	r26, 0x4B	; 75
 1a8:	da 16       	cp	r13, r26
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <main+0xc2>
	p_buf[index++] = r;
	p_buf[index] = b;
}
/**/
int main(void)
{
 1ac:	eb 2c       	mov	r14, r11
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <main+0xb0>
		} else {
			PORTB |= (1<<1);
		}
		/**/
	
		for (r= 0; r<RANGE; r += STEP){
 1b0:	b9 e1       	ldi	r27, 0x19	; 25
 1b2:	cb 0e       	add	r12, r27
 1b4:	8b e4       	ldi	r24, 0x4B	; 75
 1b6:	c8 16       	cp	r12, r24
 1b8:	09 f4       	brne	.+2      	; 0x1bc <main+0xce>
 1ba:	b2 cf       	rjmp	.-156    	; 0x120 <main+0x32>
	p_buf[index++] = r;
	p_buf[index] = b;
}
/**/
int main(void)
{
 1bc:	da 2c       	mov	r13, r10
 1be:	f6 cf       	rjmp	.-20     	; 0x1ac <main+0xbe>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
